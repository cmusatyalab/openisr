--- conf/openisr-config.in
+++ conf/openisr-config.in
@@ -52,38 +52,27 @@
 	or fail "Couldn't unload kernel modules.\nPlease suspend any " .
 				"running parcels and try again.";
 
-status "Unpacking kernel module source...";
-$topdir= tempdir("openisr-config-XXXXXXXX", TMPDIR => 1, CLEANUP => 1)
-	or fail "Couldn't create temporary directory";
-system("tar xzf " . SRC . " -C $topdir") == 0
-	or fail "Couldn't unpack kernel sources";
-opendir(DIR, $topdir)
-	or fail "Couldn't read temporary directory";
-@files = grep(/^openisr-/, readdir(DIR));
-closedir(DIR);
-@files == 1
-	or fail "Problem unpacking temporary directory";
-$subdir = "$topdir/$files[0]";
-$subdir =~ /openisr-([0-9a-zA-Z.-]+)$/
-	or fail "Couldn't parse source directory name";
-$1 eq VERSION
-	or warning "Expected module version " . VERSION . ", found $1";
-chdir($subdir)
-	or fail "Couldn't chdir";
-
-status "Configuring kernel module source...";
-system("./configure --disable-client --enable-modules") == 0
-	or fail "Couldn't configure kernel source";
-
-status "Building kernel modules...";
-system("make") == 0
-	or fail "Couldn't build kernel source";
-
-status "Installing kernel modules...";
-system("make install") == 0
-	or fail "Couldn't install kernel modules";
-system("depmod") == 0
-	or fail "Couldn't run depmod";
+#TODO: check to see if modules are already built
+# (this is not a very robust test)
+
+status "Checking status of kernel modules.";
+
+if (system("dkms status | grep openisr | grep " . VERSION . " | grep installed") == 0) {
+	status "Modules for this version are already built and installed.\n";
+} else {
+	if (system("dkms status | grep openisr | grep " . VERSION . " | grep built") == 0)
+	{
+		status "Modules already built with DKMS.\n";
+	} else {
+	status "Building modules with DKMS.";
+	system("dkms build -m openisr -v " . VERSION) == 0
+		or fail "DKMS build failed.";
+	}
+
+	status "Installing modules with DKMS.";
+	system("dkms install -m openisr -v " . VERSION) == 0
+		or fail "DKMS install failed.";
+}
 
 status "Loading kernel modules...";
 system(INITSCRIPT . " start") == 0
