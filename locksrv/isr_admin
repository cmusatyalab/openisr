#!/usr/bin/perl

##########################################################
# isr_admin - Perform various ISR administrative functions
##########################################################

#
#                       Internet Suspend/Resume
#           A system for capture and transport of PC state
#
#              Copyright (c) 2002-2004, Intel Corporation
#            Copyright (c) 2004, Carnegie Mellon University
#
# This software is distributed under the terms of the Eclipse Public
# License, Version 1.0 which can be found in the file named LICENSE.Eclipse.
# ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS SOFTWARE CONSTITUTES
# RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT
#

##############################
# Section 0: Standard prologue
##############################
use strict;
use Getopt::Long;
use File::stat;
use File::Basename;
use Socket;
use Sys::Hostname;
use Term::ANSIColor qw(:constants);
use lib "/usr/local/isr/bin";
use Server;
$| = 1; # Autoflush output on every print statement

# Function prototypes
sub encrypt ($$$$);
sub decrypt ($$$$);
sub getkeyroot ($$);
sub adduser ($);
sub deluser ($);
sub addparcel ($$$$);
sub prune ($$$);
sub getusage ();
sub keygen ();
sub query ($);

#########################
# Section 1: Main routine
#########################

#
# Variables
#
my $result;
my $target;

# Command line
my $help;
my $parceldir;
my $parcel;
my $srcparcel;
my $verbose;
my $command;
my $keyroot;
my $userid;
my $srcuserid;
my $retain;
my $version;

#
# Parse the command line args
#
Getopt::Long::Configure("no_ignore_case", "bundling_override");
$result = GetOptions(
                     "h|help+"         => \$help,
                     "p|parcel=s"      => \$parcel,
                     "P|srcparcel=s"   => \$srcparcel,
                     "r|retain=i"      => \$retain,
                     "u|userid=s"      => \$userid,
                     "U|srcuserid=s"   => \$srcuserid,
                     "v|version=i"     => \$version,
                     "V|verbose+"      => \$verbose,
                     );
if ($result == 0 or $help) {
    usage();
}

#
# Extract the command name
#
if (@ARGV == 0) {
    usage("Missing command.");
}
if (@ARGV > 1) {
    usage("Too many commands.");
}
$command = $ARGV[0];

#
# Handle the special case where someone types "admin help"
#
if ($command eq "help") {
    usage();
}

#
# Make sure we have all the arguments we need for each command
#
if ($command eq "encrypt" or 
     $command eq "decrypt") {
    usage("Missing userid (-u)")
	if (!$userid);
    usage("Missing parcel (-p)")
	if (!$parcel);
    usage("Missing version (-v)")
	if (!defined($version));
    usage("Non-positive version number ($version)")
	if ($version < 1);
}

if ($command eq "getkeyroot") {
    usage("Missing userid (-u)")
	if (!$userid);
    usage("Missing parcel name (-p)")
	if (!$parcel);
}

if ($command eq "adduser") {
    usage("Missing userid (-u)")
	if (!$userid);
}

if ($command eq "deluser") {
    usage("Missing userid (-u)")
	if (!$userid);
}

if ($command eq "addparcel") {
    usage("Missing userid (-u)")
	if (!$userid);
    usage("Missing parcel name (-p)")
	if (!$parcel);
    usage("Missing source userid (-U)")
    	if (!$srcuserid);
    usage("Missing source parcel (-P)")
	if (!$srcparcel);
}

if ($command eq "prune") {
    usage("Missing userid (-u)")
	if (!$userid);
    usage("Missing parcel name (-p)")
	if (!$parcel);
    usage("Missing number of versions to retain (-r)")
	if (!defined($retain));
}

#
# Process the command
#
if ($command eq "encrypt") {
    $keyroot = getkeyroot($userid, $parcel);
    encrypt($userid, $parcel, $version, $keyroot);
}
elsif ($command eq "decrypt") {
    $keyroot = getkeyroot($userid, $parcel);
    decrypt($userid, $parcel, $version, $keyroot);
}
elsif ($command eq "keygen") {
    $result = keygen();
    print "$result\n";
}
elsif ($command eq "getkeyroot") {
    $result = getkeyroot($userid, $parcel);
    print "$result\n";
}
elsif ($command eq "adduser") {
    adduser($userid);
}
elsif ($command eq "deluser") {
    deluser($userid);
}
elsif ($command eq "addparcel") {
    addparcel($userid, $parcel, $srcuserid, $srcparcel);
}
elsif ($command eq "prune") {
    prune($userid, $parcel, $retain);
}
elsif ($command eq "getusage") {
    getusage();
}
else {
    usage("$command is an invalid command.");
}
exit 0;


####################################
# Section 2: Definitions of commands
####################################
#
# prune - Prune all but the last "retain" versions of a parcel
#
sub prune ($$$) {
    my $userid = shift;
    my $parcel = shift;
    my $retain = shift; 

    my $parceldir;
    my @files;
    my $firstver;
    my $lastver;
    my $lastvertoprune;
    my $i;
    my $dirpath;
    my $dirname;
    my $reply;

    $parceldir = "$Server::CONTENT_ROOT/$userid/$parcel";
    
    # Not allowed to prune all of the versions!
    if ($retain < 1) {
	errexit("You must retain at least one file when pruning.");
    }

    # Get the list of versions
    opendir(DIR, $parceldir)
	or unix_errexit("Could not open directory $parceldir");
    @files = grep(/^\d+$/, readdir(DIR));
    closedir(DIR);


    # Determine the first, last, and last version to prune
    @files = reverse sort @files;
    $lastver = int($files[0]);
    $lastvertoprune = $lastver - $retain;

    @files = sort @files;
    $firstver = int($files[0]);


    # There may not be anything to do
    if ($lastvertoprune < $firstver) {
	print "No files pruned.\n";
	return;
    }

    # Prune versions $firstver to $lastver - $retain
    $reply = query("Deleting versions $firstver to $lastvertoprune. Proceed?");
    if ($reply eq "y") {
	for ($i = $firstver; $i <= $lastvertoprune; $i++) {
	    $dirname = sprintf("%06d", $i);
	    $dirpath = "$parceldir/$dirname";
	    print "Deleting $dirpath...\n";
	    system("rm -rf $dirpath") == 0
		or system_errexit("Unable to delete $dirpath.");
	}
    }
}

#
# encrypt - Encrypts an unencrypted parcel
#
sub encrypt ($$$$) {
    my $userid = shift;
    my $parcel = shift;
    my $version = shift;
    my $keyroot = shift;

    my $versionname = sprintf("%06d", $version);
    my $parceldir = "$Server::CONTENT_ROOT/$userid/$parcel/$versionname";
    my $rh;
    my $fd;

    foreach $target ("cfg.tgz", "keyring") {
	print("Encrypting $target.\n")
	    if $verbose;
	if (!-e "$parceldir/$target") {
	    errexit("Missing $parceldir/$target.\n");
	}
	($rh, $fd) = keyroot_pipe($keyroot);
        if (system("openssl enc -aes-128-cbc -in $parceldir/$target -out $parceldir/$target.enc -pass fd:$fd -salt") != 0) {
            system_errexit("Unable to encrypt $parceldir/$target.");
	}
	unlink("$parceldir/$target");
    }
}

#
# decrypt - Decrypts an encrypted parcel
#
sub decrypt ($$$$) {
    my $userid = shift;
    my $parcel = shift;
    my $version = shift;
    my $keyroot = shift;

    my $versionname = sprintf("%06d", $version);
    my $parceldir = "$Server::CONTENT_ROOT/$userid/$parcel/$versionname";
    my $rh;
    my $fd;

    foreach $target ("cfg.tgz", "keyring") {
	print("Decrypting $target.enc.\n")
	    if $verbose;
	if (!-e "$parceldir/$target.enc") {
	    errexit("Missing $parceldir/$target.enc.\n");
	}
	($rh, $fd) = keyroot_pipe($keyroot);
	if (system("openssl enc -d -aes-128-cbc -in $parceldir/$target.enc -out $parceldir/$target -pass fd:$fd -salt") != 0) {
            system_errexit("Unable to decrypt $parceldir/$target.");
	}
	unlink("$parceldir/$target.enc");
    }
}

#
# keygen - Generate a keyroot
#
sub keygen () {
    my $keyroot = `openssl rand -rand /dev/urandom -base64 15 2>/dev/null`;
    $? == 0
        or errexit("Couldn't generate keyroot");
    chomp($keyroot);
    return $keyroot;
}

#
# getkeyroot - Return the keyroot for a parcel
#
sub getkeyroot ($$) {
    my $userid = shift;
    my $parcel = shift;

    return get_value(get_parcelcfg_path($userid, $parcel), "KEYROOT");
}


#
# adduser - Add a new user
#
sub adduser ($) {
    my $userid = shift;

    my $sshdir = "/home/$userid/.ssh";
    my $isrdir = "/home/$userid/.isr";

    # Create the user's account 
    print "Adding $userid...\n";
    system("/usr/sbin/useradd -d /home/$userid -m $userid") == 0
	or err("Unable to create new account for $userid");

    # Change the password
    system("echo \"$userid:$Server::DEFAULTPWD\" | chpasswd -m") == 0
	or errexit("Unable to change password for $userid");
    if (!-d $isrdir) {
	mkdir("$isrdir")
	    or unix_errexit("Unable to make .isr directory for $userid");
    }

    # Set the file permissions
    system("chown $userid:$userid $isrdir") == 0
	or errexit("Unable to chown .isr ownership to $userid");
    system("chmod 700 /home/$userid") == 0
    	or errexit("Unable to set /home/$userid permissions to 700");

    # Add the public and private ssh keys to the user's account
    if (!-d $sshdir) {
	mkdir("$sshdir") 
	    or unix_errexit("Unable to make .ssh directory for $userid");
    }
    system("chown $userid:$userid $sshdir") == 0
	or errexit("Unable to chown .ssh ownership to $userid");
    system("ssh-keygen -C $userid -t rsa -f $sshdir/id_rsa -P ''") == 0
	or errexit("Unable to generate ssh keys for $userid");
    system("cp $sshdir/id_rsa.pub $sshdir/authorized_keys") == 0
	or errexit("Unable to create authorized_keys file");
    system("chown $userid:$userid $sshdir/id_rsa $sshdir/id_rsa.pub $sshdir/authorized_keys") == 0
	or errexit("Unable to chown key files to $userid");

    print "Success: $userid added to server\n";
}

#
# deluser - Delete all traces of an ISR user
#
sub deluser ($) {
    my $userid = shift;

    my $reply;

    #
    # Remove a user's account and everything in their home directory
    #
    $reply = query("Do you really want to delete all files for $userid?");
    if ($reply eq "y") {
	$reply = query("Are you really really sure?");
	if ($reply eq "y") {
	    print "Removing $userid...\n";
	    system("/usr/sbin/userdel -r $userid");
	} else {
	    print "Did not delete the account for $userid.\n";
	}
    }
}


#
# addparcel - Add a new parcel
#             
sub addparcel ($$$$) {
    my $userid = shift;      # Destination user id
    my $parcel = shift;      # Destination parcel name
    my $srcuserid = shift;   # Source user id
    my $srcparcel = shift;   # Source parcel name

    my $lastver;
    my $srckeyroot;
    my $dstkeyroot;
    my $uuid;
    my @files;

    my $userdir = "$Server::CONTENT_ROOT/$userid";
    my $parceldir = "$userdir/$parcel";
    my $srcpath = "$Server::CONTENT_ROOT/$srcuserid/$srcparcel";
    my $srcparcelcfg = get_parcelcfg_path($srcuserid, $srcparcel);
    my $dstparcelcfg = get_parcelcfg_path($userid, $parcel);
    my $dstparcelcfgdir = dirname($dstparcelcfg);

    # Create new content directory for this user if one doesn't already exist
    if (!-d $userdir) {
	system("mkdir $userdir") == 0
	    or errexit("Unable to create user directory ($userdir");
	system("chown $userid:$userid $userdir") == 0
	    or errexit("Unable to set owner of $userdir");
	system("chmod 755 $userdir" ) == 0
	    or errexit("Unable to set permissions on $userdir");
    }	

    # Create an empty directory for the parcel
    if (-d "$parceldir") {
	errexit("Parcel $userid/$parcel exists.");
    }
    system("mkdir $parceldir") == 0
	or errexit("Unable to make directory $parceldir.");

    # Determine the last version that was checked in (note that
    # we can't use the last link because it might not be the
    # same on the nfs server
    opendir(DIR, $srcpath)
	or unix_errexit("Could not open directory $srcpath");
    @files = reverse sort grep(/^\d+$/, readdir(DIR));
    closedir(DIR);
    $lastver = sprintf("%06d", int($files[0]));

    # Copy the most recent source parcel to the destination
    print "Copying $srcpath/$lastver to $parceldir/000001...\n";
    system("cp -R $srcpath/$lastver $parceldir/000001") == 0
	or errexit("Unable to copy $srcpath/$lastver to $parceldir/000001");
    system("cd $parceldir; ln -s 000001 last") == 0
	or errexit("Unable to create last link to $parceldir/000001");

    # Re-encrypt the destination with a new keyroot
    $srckeyroot = get_value($srcparcelcfg, "KEYROOT");
    $dstkeyroot = keygen();
    decrypt($userid, $parcel, 1, $srckeyroot);
    encrypt($userid, $parcel, 1, $dstkeyroot);
    
    # Set the appropriate file ownership and permissions
    system("chown -R $userid:$userid $parceldir") == 0
	or errexit("Unable to set owner of $parceldir");
    system("chmod -R 755 $parceldir") == 0
	or errexit("Unable to set permissions of $parceldir");
    
    # Write out the new parcel.cfg
    mkdir($dstparcelcfgdir)
	or unix_errexit("Unable to make directory $dstparcelcfgdir.");
    open(IN, $srcparcelcfg)
    	or unix_errexit("Couldn't read $srcparcelcfg");
    open(OUT, ">", $dstparcelcfg)
    	or unix_errexit("Couldn't write $dstparcelcfg");
    while (<IN>) {
	if (/^KEYROOT/) {
	    print OUT "KEYROOT = $dstkeyroot\n";
	} elsif (/^UUID/) {
	    $uuid = `uuidgen`;
	    $? == 0
	        or errexit("Couldn't generate UUID");
	    chomp($uuid);
	    print OUT "UUID = $uuid\n";
	} else {
	    print OUT;
	}
    }
    close IN;
    close OUT;
    system("chown -R $userid:$userid $dstparcelcfgdir") == 0
	or errexit("Unable to set owner of $dstparcelcfgdir");

    print "Success: Added $userid/$parcel\n";
}

#
# getusage - Summarize the recent activity of each user
#
sub getusage () {
    my $userid;
    my $isrdir;
    my $logentry;
    my $logserver;
    my $logdate;
    my $logstatus;
    my $loguserid;
    my $logparcel;
    my $logclient;
    my $lastcmd;
    my $lastdate;
    my $lastlog;
    my $junk;
    my $msg;
    
    my @isrusers = ();

    # Generate the list of isr users
    opendir(HOMEDIR, "/home")
	or unix_errexit("Couldn't read /home");
    foreach $userid (grep(!/^\./, readdir(HOMEDIR))) {
	push(@isrusers, $userid)
	    if -d "/home/$userid/.isr";
    }
    closedir(HOMEDIR);

    # For each user and parcel, extract the last last entry in the 
    # lockholder log
    foreach $userid (sort @isrusers) {
	print "\n";
	opendir(ISRDIR, "/home/$userid/.isr")
	    or unix_errexit("Couldn't read $userid's ISR directory");
	foreach $parcel (sort grep(!/^\./, readdir(ISRDIR))) {
	    # Extract the date of the last release or acquire of this parcel
	    $logentry = `tail -n 1 $Server::CONTENT_ROOT/$userid/$parcel/lockholder.log`;
	    chomp($logentry);
	    ($logserver, $logdate, $logstatus, $loguserid, $logparcel, $logclient) = 
		split('\|', $logentry);
	    
	    # Extract the date of the last activity of any kind on this parcel
	    $lastlog = `fgrep BEGIN $Server::CONTENT_ROOT/$userid/$parcel/session.log | tail -n 1`;
	    chomp($lastlog);
	    ($lastdate, $junk, $junk, $junk, $junk, $lastcmd) 
		= split('\|', $lastlog);
	    
	    # Now print the message
	    $msg = "$userid/$parcel $logdate [$lastcmd $lastdate]\n";
	    if ($logstatus eq "released") {
		print GREEN, $msg, RESET;
	    } elsif ($logstatus eq "acquired") {
		print RED, $msg, RESET;
	    } else {
		print $msg;
	    }
	}
	closedir(ISRDIR);
    }
}


#############################
# Section 3: Helper functions
#############################

#
# query - Ask the user a question and return the reply
#
sub query ($) {
    my $question = shift;

    my $reply;

    print "$question (y/n): ";
    $reply = <STDIN>;
    chomp($reply);

    # Keep asking until the user replies either y or n
    while ($reply ne "y" and $reply ne "n") {
	print "$question (y/n): ";
	$reply = <STDIN>;
	chomp($reply);
    }
    return $reply;
}

sub usage {
    my $msg = shift;
    my $progname;
    my $croot;
    
    # Strip any path information from the program name
    ($progname = $0) =~ s#.*/##s;
    ($croot = $Server::CONTENT_ROOT) =~ s:/$::;
    
    if ($msg) {
        print "Error: $msg\n";
    }
    
    print RED, "Usage: $progname cmd [options...]\n", RESET;
    print BLUE, "Commands: addparcel, adduser, deluser, decrypt, encrypt, getkeyroot,\n          getusage, keygen, prune.\n", RESET;

    print "  addparcel  Add a parcel (-u, -p, -U, -P).\n";
    print "  adduser    Add user to system (-u).\n";
    print "  deluser    Delete user from system (-u).\n";
    print "  decrypt    Decrypt parcel version (-u, -p, -v).\n";
    print "  encrypt    Encrypt parcel version (-u, -p, -v).\n";
    print "  getkeyroot Show parcel keyroot (-u, -p).\n";
    print "  getusage   List recent activity for each parcel (no args)\n";
    print "  keygen     Generate a keyroot (no args).\n";
    print "  prune      Prune old versions of a parcel (-u, -p, -r).\n";

    print "Options:\n";
    print "  -h,--help         Print help message (Try '-hh' for some concrete examples).\n";
    print "  -p,--parcel       Parcel name (e.g., winxp).\n";
    print "  -P,--srcparcel    Source parcel name.\n";
    print "  -r,--retain       How many of the most recent versions to retain when pruning.\n";
    print "  -u,--userid       ISR userid.\n";
    print "  -U,--srcuserid    Username of source parcel.\n";
    print "  -v,--version      Version number to encrypt or decrypt.\n";
    print "  -V,--verbose      Increment verbosity level.\n";
    if ($help > 1) {
	print "\n";
	print "Examples:\n"; 
	print RED, "addparcel - ", RESET, "Create new parcel winxp for existing user bovik in $croot\n";
	print "using latest version of existing parcel in $croot/gold/goldwinxp\n";
	print BLUE, "% isr_admin addparcel -u bovik -p winxp -U gold -Pgoldwinxp\n", RESET;
	print "\n";
	print RED, "adduser - ", RESET, "Add user bovik to the system\n";
	print BLUE, "% isr_admin adduser -u bovik\n", RESET;
	print "\n";
	print RED, "deluser - ", RESET, "Delete user bovik from the system\n";
	print BLUE, "% isr_admin deluser -u bovik\n", RESET;
	print "\n";
	print RED, "decrypt - ", RESET, "Decrypt files in $croot/bovik/winxp/00003\n";
	print BLUE, "% isr_admin decrypt -u bovik -p winxp -v 3\n", RESET;
	print "\n";
	print RED, "encrypt - ", RESET, "Encrypt files in $croot/bovik/winxp/00003\n";
	print BLUE, "% isr_admin encrypt -u bovik -p winxp -v 3\n", RESET;
	print "\n";

	print RED, "getkeyroot - ", RESET, "Show the keyroot for parcel bovik/winxp\n";
	print BLUE, "% isr_admin getkeyroot -u bovik -p winxp\n", RESET;
	print "\n";

	print RED, "getusage - ", RESET, "List recent activity for each parcel\n";
	print BLUE, "% isr_admin getusage\n", RESET;
	print "\n";

	print RED, "keygen - ", RESET, "Generate a random key root\n";
	print BLUE, "% isr_admin keygen\n", RESET;
	print "\n";

	print RED, "prune - ", RESET, "Prune all but the last 10 versions of the parcel stored at\n";
	print "$croot/bovik/winxp.\n";
	print BLUE, "% isr_admin prune -u bovik -p winxp -r 10\n", RESET;
    }
    exit 0;
}
