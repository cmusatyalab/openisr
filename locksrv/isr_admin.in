#!!!PERLPATH!!

##########################################################
# isr_admin - Perform various ISR administrative functions
##########################################################

#
#                     Internet Suspend/Resume (R)
#           A system for capture and transport of PC state
#
#              Copyright (c) 2002-2004, Intel Corporation
#         Copyright (c) 2004-2010, Carnegie Mellon University
#
# This software is distributed under the terms of the Eclipse Public
# License, Version 1.0 which can be found in the file named LICENSE.Eclipse.
# ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS SOFTWARE CONSTITUTES
# RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT
#

##############################
# Section 0: Standard prologue
##############################
use strict;
use Getopt::Long;
use File::stat;
use File::Copy;
use File::Basename;
use File::Temp qw/tempdir/;
use MIME::Base64 qw/encode_base64/;
use POSIX qw/ceil/;
use Socket;
use Sys::Hostname;
use Term::ANSIColor qw(:constants);
use constant {
	RCS_REVISION => "!!REVISION!!",
	BINDIR => "!!BINDIR!!",
	LIBDIR => "!!LIBDIR!!",
	SYSCONFDIR => "!!SYSCONFDIR!!",
	STATEDIR => "!!STATEDIR!!",
	CHUNKSIZE => 131072,
	CHUNKSPERDIR => 512,
	KEYROOT_BYTES => 15,
	PASSWORD_BYTES => 9,
};
use lib "!!SHAREDIR!!";
use Server;
$| = 1; # Autoflush output on every print statement

# Function prototypes
sub encrypt ($$$$);
sub decrypt ($$$$);
sub getkeyroot ($$);
sub adduser ($);
sub deluser ($);
sub init_parceldir ($$);
sub finalize_parceldir ($$);
sub get_last_parcelverdir ($);
sub gen_uuid ();
sub parse_disk_size ($$);
sub get_image_size ($$);
sub get_maxkb ($$);
sub gen_chunks ($$$$);
sub import_chunks ($$$$$);
sub copy_chunks ($$$$);
sub copydir ($$);
sub copyparcel ($$$$$);
sub new_parcel ($$$$$$$);
sub makeparcel_gen_chunks ($$$$$);
sub makeparcel ($$$$$);
sub import ($$$$$);
sub export ($$$);
sub upgrade ($$);
sub delparcel ($$);
sub prune ($$$);
sub getusage ();
sub keygen ($);
sub query ($);

#########################
# Section 1: Main routine
#########################

#
# Variables
#
my $result;
my $target;

# Command line
my $help;
my $parceldir;
my $parcel;
my $srcparcel;
my $verbose;
my $force;
my $command;
my $keyroot;
my $userid;
my $srcuserid;
my $retain;
my $version;
my $size;
my $memsize;
my $vmm;
my $imgfile;
my $cfgdir;
my $quick;
my $format;

# Server configuration
my %config = get_config();

#
# Parse the command line args
#
Getopt::Long::Configure("no_ignore_case", "bundling_override");
$result = GetOptions(
                     "C|cfgdir=s"      => \$cfgdir,
                     "f|force"         => \$force,
                     "F|file=s"        => \$imgfile,
                     "h|help+"         => \$help,
                     "m|memsize=i"     => \$memsize,
                     "M|vmm=s"         => \$vmm,
                     "p|parcel=s"      => \$parcel,
                     "P|srcparcel=s"   => \$srcparcel,
                     "Q|quick"         => \$quick,
                     "r|retain=i"      => \$retain,
                     "s|size=s"        => \$size,
                     "T|format=i"      => \$format,
                     "u|userid=s"      => \$userid,
                     "U|srcuserid=s"   => \$srcuserid,
                     "v|version=i"     => \$version,
                     "V|verbose+"      => \$verbose,
                     );
if ($result == 0 or $help) {
    usage();
}

#
# Extract the command name
#
if (@ARGV == 0) {
    usage("Missing command.");
}
if (@ARGV > 1) {
    usage("Too many commands.");
}
$command = $ARGV[0];

#
# Handle the special case where someone types "admin help"
#
if ($command eq "help") {
    usage();
}

#
# Make sure we have all the arguments we need for each command
#
if ($command eq "encrypt" or 
     $command eq "decrypt") {
    usage("Missing userid (-u)")
	if (!$userid);
    usage("Missing parcel (-p)")
	if (!$parcel);
    usage("Missing version (-v)")
	if (!defined($version));
    usage("Non-positive version number ($version)")
	if ($version < 1);
}

if ($command eq "getkeyroot") {
    usage("Missing userid (-u)")
	if (!$userid);
    usage("Missing parcel name (-p)")
	if (!$parcel);
}

if ($command eq "adduser") {
    usage("Missing userid (-u)")
	if (!$userid);
}

if ($command eq "deluser") {
    usage("Missing userid (-u)")
	if (!$userid);
}

if ($command eq "copyparcel") {
    usage("Missing userid (-u)")
	if (!$userid);
    usage("Missing parcel name (-p)")
	if (!$parcel);
    usage("Missing source userid (-U)")
    	if (!$srcuserid);
    usage("Missing source parcel (-P)")
	if (!$srcparcel);
    # -s is optional
}

if ($command eq "makeparcel") {
    usage("Missing userid (-u)")
        if (!$userid);
    usage("Missing parcel name (-p)")
	if (!$parcel);
    usage("Missing memory image size (-m)")
        if (!$memsize);
    usage("Missing parcel size (-s)")
        if (!$size);
    usage("Missing VMM type (-M)")
        if (!$vmm);
    # -C, -T optional
}

if ($command eq "import") {
    usage("Missing userid (-u)")
        if (!$userid);
    usage("Missing parcel name (-p)")
	if (!$parcel);
    usage("Missing memory image size (-m)")
        if (!$memsize);
    usage("Missing disk image file (-F)")
        if (!$imgfile);
    usage("Missing VMM type (-M)")
        if (!$vmm);
    # -C, -Q, -T optional
}

if ($command eq "export") {
    usage("Missing userid (-u)")
        if (!$userid);
    usage("Missing parcel name (-p)")
	if (!$parcel);
    usage("Missing output file (-F)")
        if (!$imgfile);
    # -C optional
}

if ($command eq "upgrade") {
    usage("Missing userid (-u)")
        if (!$userid);
    usage("Missing parcel name (-p)")
	if (!$parcel);
}

if ($command eq "delparcel") {
    usage("Missing userid (-u)")
        if (!$userid);
    usage("Missing parcel name (-p)")
	if (!$parcel);
}

if ($command eq "prune") {
    usage("Missing userid (-u)")
	if (!$userid);
    usage("Missing parcel name (-p)")
	if (!$parcel);
    usage("Missing number of versions to retain (-r)")
	if (!defined($retain));
}

#
# Process the command
#
if ($command eq "encrypt") {
    $keyroot = getkeyroot($userid, $parcel);
    encrypt($userid, $parcel, $version, $keyroot);
}
elsif ($command eq "decrypt") {
    $keyroot = getkeyroot($userid, $parcel);
    decrypt($userid, $parcel, $version, $keyroot);
}
elsif ($command eq "keygen") {
    $result = keygen(KEYROOT_BYTES);
    print "$result\n";
}
elsif ($command eq "getkeyroot") {
    $result = getkeyroot($userid, $parcel);
    print "$result\n";
}
elsif ($command eq "adduser") {
    adduser($userid);
}
elsif ($command eq "deluser") {
    deluser($userid);
}
elsif ($command eq "copyparcel") {
    copyparcel($userid, $parcel, $srcuserid, $srcparcel, $size);
}
elsif ($command eq "makeparcel") {
    makeparcel($userid, $parcel, $size, $memsize, $vmm);
}
elsif ($command eq "import") {
    import($userid, $parcel, $imgfile, $memsize, $vmm);
}
elsif ($command eq "export") {
    export($userid, $parcel, $imgfile);
}
elsif ($command eq "upgrade") {
    upgrade($userid, $parcel);
}
elsif ($command eq "delparcel") {
    delparcel($userid, $parcel);
}
elsif ($command eq "prune") {
    prune($userid, $parcel, $retain);
}
elsif ($command eq "getusage") {
    getusage();
}
else {
    usage("$command is an invalid command.");
}
exit 0;


####################################
# Section 2: Definitions of commands
####################################
#
# prune - Prune all but the last "retain" versions of a parcel
#
sub prune ($$$) {
    my $userid = shift;
    my $parcel = shift;
    my $retain = shift; 

    my $parceldir;
    my @files;
    my $firstver;
    my $lastver;
    my $lastvertoprune;
    my $i;
    my $dirpath;
    my $dirname;
    my $reply;

    $parceldir = "$config{content_root}/$userid/$parcel";
    
    # Not allowed to prune all of the versions!
    if ($retain < 1) {
	errexit("You must retain at least one version when pruning.");
    }

    # Get the list of versions
    opendir(DIR, $parceldir)
	or unix_errexit("Could not open directory $parceldir");
    @files = grep(/^\d+$/, readdir(DIR));
    closedir(DIR);


    # Determine the first, last, and last version to prune
    @files = reverse sort @files;
    $lastver = int($files[0]);
    $lastvertoprune = $lastver - $retain;

    @files = sort @files;
    $firstver = int($files[0]);


    # There may not be anything to do
    if ($lastvertoprune < $firstver) {
	print "No files pruned.\n";
	return;
    }

    # Prune versions $firstver to $lastver - $retain
    $reply = query("Deleting versions $firstver to $lastvertoprune. Proceed?");
    if ($reply eq "y") {
	for ($i = $firstver; $i <= $lastvertoprune; $i++) {
	    $dirname = sprintf("%06d", $i);
	    $dirpath = "$parceldir/$dirname";
	    print "Deleting $userid/$parcel/$dirname...\n";
	    system("rm -rf $dirpath") == 0
		or system_errexit("Unable to delete $dirpath.");
	}
    }
}

#
# encrypt - Encrypts an unencrypted parcel
#
sub encrypt ($$$$) {
    my $userid = shift;
    my $parcel = shift;
    my $version = shift;
    my $keyroot = shift;

    my $versionname = sprintf("%06d", $version);
    my $parceldir = "$config{content_root}/$userid/$parcel/$versionname";
    my $rh;
    my $fd;

    foreach $target ("cfg.tgz", "keyring") {
	print("Encrypting $target.\n")
	    if $verbose;
	if (!-e "$parceldir/$target") {
	    errexit("Missing $parceldir/$target.\n");
	}
	($rh, $fd) = keyroot_pipe($keyroot);
        if (system(LIBDIR . "/blobtool -e -i $parceldir/$target -o $parceldir/$target.enc -k $fd") != 0) {
            system_errexit("Unable to encrypt $parceldir/$target.");
	}
	unlink("$parceldir/$target");
    }
}

#
# decrypt - Decrypts an encrypted parcel
#
sub decrypt ($$$$) {
    my $userid = shift;
    my $parcel = shift;
    my $version = shift;
    my $keyroot = shift;

    my $versionname = sprintf("%06d", $version);
    my $parceldir = "$config{content_root}/$userid/$parcel/$versionname";
    my $rh;
    my $fd;
    my $umask;

    $umask = umask(0077);
    foreach $target ("cfg.tgz", "keyring") {
	print("Decrypting $target.enc.\n")
	    if $verbose;
	if (!-e "$parceldir/$target.enc") {
	    errexit("Missing $parceldir/$target.enc.\n");
	}
	($rh, $fd) = keyroot_pipe($keyroot);
	if (system(LIBDIR . "/blobtool -ed -i $parceldir/$target.enc -o $parceldir/$target -k $fd") != 0) {
            system_errexit("Unable to decrypt $parceldir/$target.");
	}
	unlink("$parceldir/$target.enc");
    }
    umask($umask);
}

#
# keygen - Generate the specified number of random bytes, base64-encoded
#
sub keygen ($) {
    my $bytes = shift;
    
    my $data;
    
    open(UR, "/dev/urandom")
        or unix_errexit("Couldn't open /dev/urandom");
    read(UR, $data, $bytes) == $bytes
        or unix_errexit("Couldn't read /dev/urandom");
    close(UR);
    return encode_base64($data, "");
}

#
# getkeyroot - Return the keyroot for a parcel
#
sub getkeyroot ($$) {
    my $userid = shift;
    my $parcel = shift;

    return get_value(get_parcelcfg_path($userid, $parcel), "KEYROOT");
}

#
# make_userdir - Create the user's base directory in the content root, if it
#                doesn't already exist
#
sub make_userdir ($) {
    my $userid = shift;

    my $userdir = "$config{content_root}/$userid";

    if (!-d $userdir) {
	mkdir($userdir)
	    or unix_errexit("Unable to create user directory ($userdir)");
	system("chown $userid:$userid $userdir") == 0
	    or system_errexit("Unable to set owner of $userdir");
	chmod(0755, $userdir) == 1
	    or unix_errexit("Unable to set permissions on $userdir");
    }
}

#
# adduser - Add a new user
#
sub adduser ($) {
    my $userid = shift;

    my $sshdir = "/home/$userid/.ssh";
    my $isrdir = "/home/$userid/.isr";
    my $shell = BINDIR . "/isr_shell";
    my $passwd;

    # Make sure the account doesn't already exist
    errexit("User $userid exists.")
        if defined getpwnam($userid);

    # Create the user's account 
    print "Adding $userid...\n";
    system("/usr/sbin/useradd -d /home/$userid -m $userid -s $shell") == 0
	or errexit("Unable to create new account for $userid");

    # Change the password
    $passwd = $config{'default_pass'};
    $passwd = keygen(PASSWORD_BYTES)
        unless defined $passwd;
    # Older chpasswd will encrypt passwords with DES unless -m is specified.
    # Some newer versions of chpasswd don't support (or require) -m.
    open(CHP, '|-', 'chpasswd -m 2>/dev/null')
        or unix_errexit("Unable to change password for $userid");
    print CHP "$userid:$passwd\n";
    unless (close CHP) {
        open(CHP, '|-', 'chpasswd')
            or unix_errexit("Unable to change password for $userid");
        print CHP "$userid:$passwd\n";
        close CHP
	    or system_errexit("Unable to change password for $userid");
    }

    # Create data directories
    if (!-d $isrdir) {
	mkdir("$isrdir")
	    or unix_errexit("Unable to make .isr directory for $userid");
    }
    make_userdir($userid);

    # Set the file permissions
    system("chown $userid:$userid $isrdir") == 0
	or errexit("Unable to chown .isr ownership to $userid");
    chmod(0700, "/home/$userid") == 1
    	or unix_errexit("Unable to set /home/$userid permissions to 700");
    chmod(0700, $isrdir) == 1
    	or unix_errexit("Unable to set $isrdir permissions to 700");

    # Add the public and private ssh keys to the user's account
    if (!-d $sshdir) {
	mkdir("$sshdir") 
	    or unix_errexit("Unable to make .ssh directory for $userid");
    }
    system("chown $userid:$userid $sshdir") == 0
	or errexit("Unable to chown .ssh ownership to $userid");
    system("ssh-keygen -C $userid -t rsa -f $sshdir/id_rsa -P ''") == 0
	or errexit("Unable to generate ssh keys for $userid");
    copy("$sshdir/id_rsa.pub", "$sshdir/authorized_keys")
	or unix_errexit("Unable to create authorized_keys file");
    system("chown $userid:$userid $sshdir/id_rsa $sshdir/id_rsa.pub $sshdir/authorized_keys") == 0
	or errexit("Unable to chown key files to $userid");

    print "Success: $userid added to server\n";
    print "Password: $passwd\n";
}

#
# deluser - Delete all traces of an ISR user
#
sub deluser ($) {
    my $userid = shift;

    my $reply;

    #
    # Remove a user's account and everything in their home directory
    #
    $reply = query("Do you really want to delete all files for $userid?");
    if ($reply eq "y") {
	$reply = query("Are you really really sure?");
	if ($reply eq "y") {
	    print "Removing $userid...\n";
	    system("/usr/sbin/userdel -r $userid");
	    system("rm -rf $config{content_root}/$userid");
	} else {
	    print "Did not delete the account for $userid.\n";
	}
    }
}

#
# init_parceldir - Helper to create a new parcel directory
#
sub init_parceldir ($$) {
    my $userid = shift;
    my $parcel = shift;
    
    my $umask;
    
    my $parceldir = "$config{content_root}/$userid/$parcel";
    my $parcelcfg = get_parcelcfg_path($userid, $parcel);
    my $parcelcfgdir = dirname($parcelcfg);
    
    errexit("Parcel $userid/$parcel exists.")
        if -d $parceldir;
    
    # Create new content directory for this user if one doesn't already exist
    make_userdir($userid);

    # Create empty directories for the parcel
    mkdir($parceldir)
	or unix_errexit("Unable to make directory $parceldir.");
    mkdir("$parceldir/cache")
	or unix_errexit("Unable to make directory $parceldir/cache.");
    mkdir("$parceldir/000001")
        or unix_errexit("Can't make parcel version directory");
    mkdir("$parceldir/000001/hdk")
        or unix_errexit("Can't make hdk directory");
    $umask = umask(0077);
    mkdir($parcelcfgdir)
	or unix_errexit("Unable to make directory $parcelcfgdir.");
    umask($umask);
    
    return ($parceldir, $parcelcfg);
}

#
# finalize_parceldir - Helper to finish setting up a newly-created parcel dir
#
sub finalize_parceldir ($$) {
    my $userid = shift;
    my $parcel = shift;
    
    my $parceldir = "$config{content_root}/$userid/$parcel";
    my $parcelcfgdir = dirname(get_parcelcfg_path($userid, $parcel));
    
    # Set the appropriate ownership and permissions for the parceldir,
    # and create the last symlink
    symlink("000001", "$parceldir/last")
        or errexit("Unable to create last symlink");
    system("chown -R $userid:$userid $parceldir") == 0
	or errexit("Unable to set owner of $parceldir");
    system("chmod -R u=rwX,go=rX $parceldir") == 0
	or errexit("Unable to set permissions of $parceldir");
    
    # Set ownership for the parcel.cfg directory
    system("chown -R $userid:$userid $parcelcfgdir") == 0
	or errexit("Unable to set owner of $parcelcfgdir");
}

#
# get_last_parcelverdir - Return the path to the most recent version
#                         directory in the given parcel directory
#
sub get_last_parcelverdir ($) {
    my $parceldir = shift;

    my @files;

    # Don't trust the last symlink
    opendir(DIR, $parceldir)
	or unix_errexit("Could not open directory $parceldir");
    @files = reverse sort grep(/^\d+$/, readdir(DIR));
    closedir(DIR);
    return $parceldir . "/" . sprintf("%06d", int($files[0]));
}

#
# gen_uuid - Generate a new UUID
#
sub gen_uuid () {
    my $uuid = `uuidgen`;
    $? == 0
	or errexit("Couldn't generate UUID");
    chomp($uuid);
    return $uuid;
}

#
# parse_disk_size - Parse a disk size parameter and return NUMCHUNKS
#
sub parse_disk_size ($$) {
    my $chunksize = shift;
    my $size = shift;

    my $shift;

    unless ($size =~ /^([0-9]+)([KMG])$/) {
	errexit("Can't parse specified parcel size '$size'");
    }
    if ($2 eq "K") {
	$shift = 0;
    } elsif ($2 eq "M") {
	$shift = 10;
    } elsif ($2 eq "G") {
	$shift = 20;
    }
    # Avoid integer overflow on 32-bit systems
    return ceil(($1 << $shift) / ($chunksize >> 10));
}

#
# get_image_size - Examine a flat disk image and return its size in chunks
#
sub get_image_size ($$) {
    my $chunksize = shift;
    my $disk = shift;

    -r $disk
	or errexit("Can't read $disk");

    return int(((-s _) + $chunksize - 1) / $chunksize);
}

#
# get_maxkb - Calculate the MAXKB setting for a given CHUNKSIZE and
#             NUMCHUNKS
#
sub get_maxkb ($$) {
    my $chunksize = shift;
    my $numchunks = shift;

    return ($chunksize >> 10) * $numchunks;
}

#
# gen_chunks - Populate a parcel with zeroed chunks
#
sub gen_chunks ($$$$) {
    my $parcelverdir = shift;
    my $target_count = shift;
    my $chunksize = shift;
    my $chunksperdir = shift;

    $chunksize /= 1024;
    system(LIBDIR . "/disktool -e $target_count -d $parcelverdir " .
			"-s $chunksize -m $chunksperdir -p") == 0
	or system_errexit("Couldn't generate disk chunks");
}

#
# import_chunks - Populate a parcel with chunks from a flat disk image
#
sub import_chunks ($$$$$) {
    my $image = shift;
    my $parcelverdir = shift;
    my $numchunks = shift;
    my $chunksize = shift;
    my $chunksperdir = shift;

    my $lzf = $quick ? "-l" : "";

    $chunksize /= 1024;
    system(LIBDIR . "/disktool -i $image -d $parcelverdir -s $chunksize " .
			"-m $chunksperdir -p $lzf") == 0
	or system_errexit("Couldn't import disk image");
}

#
# Copy the specified number of chunks from oldbase to newbase.
#
sub copy_chunks ($$$$) {
    my $oldbase = shift;
    my $newbase = shift;
    my $numchunks = shift;
    my $chunksperdir = shift;

    my $dir;
    my $file;
    my $newdir;
    my $lastdir = "";
    my $i;

    for ($i = 0; $i < $numchunks; $i++) {
	$dir = sprintf("%04d", int($i / $chunksperdir));
	$file = sprintf("%04d", $i % $chunksperdir);
	$newdir = "$newbase/hdk/$dir";
	if ($newdir ne $lastdir and ! -d $newdir) {
	    mkdir($newdir)
		or errexit("Can't create $newdir");
	}
	$lastdir = $newdir;
	copy("$oldbase/hdk/$dir/$file", "$newdir/$file")
	    or unix_errexit("Couldn't write $newdir/$file");
    }
    system(LIBDIR . "/query $newbase/keyring 'DELETE FROM keys WHERE " .
			"chunk >= " . $numchunks . "' > /dev/null") == 0
        or errexit("Couldn't update keyring");
}

#
# copydir - Copy the contents of $srcdir to $dstdir
#
sub copydir ($$) {
    my $srcdir = shift;
    my $dstdir = shift;

    my $dh;
    my @files;
    my $file;
    my $srcfile;
    my $dstfile;

    opendir($dh, $srcdir)
	or unix_errexit("Couldn't read $srcdir");
    @files = readdir($dh);
    closedir($dh);
    foreach $file (@files) {
	next if $file =~ /^\.{1,2}$/;
	$srcfile = "$srcdir/$file";
	$dstfile = "$dstdir/$file";
	if (-f $srcfile) {
	    copy($srcfile, $dstfile)
		or unix_errexit("Couldn't copy $srcfile");
	} elsif (-d $srcfile) {
	    mkdir($dstfile)
		or unix_errexit("Couldn't create directory $dstfile");
	    copydir($srcfile, $dstfile);
	} else {
	    err("Skipping copy of $srcfile");
	}
    }
}

#
# copyparcel - Create a new parcel based on an existing one
#             
sub copyparcel ($$$$$) {
    my $userid = shift;      # Destination user id
    my $parcel = shift;      # Destination parcel name
    my $srcuserid = shift;   # Source user id
    my $srcparcel = shift;   # Source parcel name
    my $size = shift;        # New parcel size, if resize desired

    my $dstparcelcfg;
    my $parceldir;
    my $srcverpath;
    my $srcver;
    my $dstkeyroot;
    my $file;

    my $srcpath = "$config{content_root}/$srcuserid/$srcparcel";
    my %cfg = get_values(get_parcelcfg_path($srcuserid, $srcparcel));

    my $chunksize = int($cfg{"CHUNKSIZE"});
    my $chunksperdir = int($cfg{"CHUNKSPERDIR"});
    my $srcchunks = int($cfg{"NUMCHUNKS"});
    my $numchunks = $srcchunks;
    my $maxkb = int($cfg{"MAXKB"});
    if (defined $size) {
	$numchunks = parse_disk_size($chunksize, $size);
	$maxkb = get_maxkb($chunksize, $numchunks);
    }

    # Warn user if they asked to reduce the disk size
    print YELLOW, "Warning: Copied parcel has smaller disk than original.\n",
			RESET
	if $srcchunks > $numchunks;

    # Create new content directory for this user and parcel
    ($parceldir, $dstparcelcfg) = init_parceldir($userid, $parcel);

    # Determine the last version that was checked in
    $srcver = $srcverpath = get_last_parcelverdir($srcpath);
    $srcver =~ s:.*/::;

    # Copy the parcel metadata and memory image, and decrypt it
    print "Copying $srcuserid/$srcparcel/$srcver to $userid/$parcel/000001...\n";
    for $file ("cfg.tgz.enc", "keyring.enc") {
        copy("$srcverpath/$file", "$parceldir/000001/$file")
            or unix_errexit("Couldn't write new $file");
    }
    decrypt($userid, $parcel, 1, $cfg{"KEYROOT"});

    # Copy the disk to the destination, trimming the keyring if necessary
    copy_chunks("$srcverpath", "$parceldir/000001",
			$numchunks > $srcchunks ? $srcchunks : $numchunks,
			$chunksperdir);

    # Extend the parcel if requested
    if ($numchunks > $srcchunks) {
        print "Generating new chunks...\n";
        gen_chunks("$parceldir/000001", $numchunks, $chunksize, $chunksperdir);
    }

    # Re-encrypt the cfg tarball with a new keyroot
    $dstkeyroot = keygen(KEYROOT_BYTES);
    encrypt($userid, $parcel, 1, $dstkeyroot);
    
    # Write out the new parcel.cfg
    %cfg = (
        %cfg,
        # Overwrite existing entries
        KEYROOT => $dstkeyroot,
        UUID => gen_uuid(),
        USER => $userid,
        PARCEL => $parcel,
        NUMCHUNKS => $numchunks,
        MAXKB => $maxkb
    );
    write_parcel_cfg($dstparcelcfg, %cfg);
    
    # Set ownership and permissions, add last symlink, etc.
    finalize_parceldir($userid, $parcel);

    print "Success: Added $userid/$parcel\n";
}

#
# new_parcel - Helper to create a new parcel
#
sub new_parcel ($$$$$$$) {
    my $userid = shift;      # Destination user id
    my $parcel = shift;      # Destination parcel name
    my $memsize = shift;     # Memory image size
    my $vmm = shift;         # VMM type
    my $get_size = shift;    # Get-size handler for disk
    my $make_chunks = shift; # Chunk-generation handler for disk
    my $diskinfo = shift;    # Handler-specific information about disk

    my $parcelcfg;
    my $parceldir;
    my $parcelverdir;
    my $keyroot;
    my $umask;
    my $numchunks;
    my $maxkb;
    my %cfg;

    my $chunksize = CHUNKSIZE;
    my $chunksperdir = CHUNKSPERDIR;

    # Calculate parcel size
    $numchunks = $get_size->($chunksize, $diskinfo);
    $maxkb = get_maxkb($chunksize, $numchunks);
    
    # Validate memory image size
    errexit("Invalid memory image size '$memsize'")
        unless $memsize > 0;

    # Validate cfgdir, if specified
    errexit("Couldn't read $cfgdir")
	if $cfgdir and not -d $cfgdir;
    
    # Validate format version, if specified
    $format = $config{default_format}
        unless defined $format;
    errexit("Unknown format version specified")
        if $format < 3 or $format > 4;

    # Create new content directory for this user and parcel
    print "Initializing parcel...\n";
    ($parceldir, $parcelcfg) = init_parceldir($userid, $parcel);
    $parcelverdir = "$parceldir/000001";
    
    # Generate the chunk tree and populate the keyring
    print "Generating virtual disk...\n";
    $make_chunks->($diskinfo, $parcelverdir, $numchunks, $chunksize,
			$chunksperdir);
    
    # Generate the cfg tarball
    print "Populating memory image...\n";
    mkdir("$parcelverdir/cfg")
        or errexit("Couldn't create cfg directory");
    copydir($cfgdir, "$parcelverdir/cfg")
	if $cfgdir;
    system(LIBDIR . "/blobtool -to $parcelverdir/cfg.tgz -C $parcelverdir cfg") == 0
        or errexit("Couldn't generate cfg tarball");
    system("rm -rf $parcelverdir/cfg") == 0
	or system_errexit("Couldn't remove cfg directory");
    
    # Encrypt the parcel with a new keyroot
    print "Encrypting metadata...\n";
    $keyroot = keygen(KEYROOT_BYTES);
    encrypt($userid, $parcel, 1, $keyroot);
    
    # Write out the new parcel.cfg
    print "Finishing...\n";
    %cfg = (
	VERSION => $format,
	UUID => gen_uuid(),
	VMM => $vmm,
	CRYPTO => 'aes-sha1',
	COMPRESS => 'zlib,lzf',
	BLOBCOMPRESS => 'gzip,lzf,lzma',
	KEYROOT => $keyroot,
	USER => $userid,
	PARCEL => $parcel,
	READONLY => 0,
	PROTOCOL => 'HTTPSSH',
	SERVER => $config{hostname},
	RPATH => "http://$config{hostname}$config{http_path}",
	WPATH => "$config{hostname}:$config{content_root}",
	MAXKB => $maxkb,
	CHUNKSIZE => $chunksize,
	NUMCHUNKS => $numchunks,
	CHUNKSPERDIR => $chunksperdir,
	MEM => $memsize
    );
    if ($format < 4) {
        delete $cfg{'BLOBCOMPRESS'};
        delete $cfg{'READONLY'};
    }
    write_parcel_cfg($parcelcfg, %cfg);

    # Set ownership and permissions, add last symlink, etc.
    finalize_parceldir($userid, $parcel);
    
    print "Success: Added $userid/$parcel (format $format)\n";
}

#
# makeparcel_gen_chunks - gen_chunks wrapper for makeparcel
#
sub makeparcel_gen_chunks ($$$$$) {
    my $diskinfo = shift;
    my $parcelverdir = shift;
    my $numchunks = shift;
    my $chunksize = shift;
    my $chunksperdir = shift;

    gen_chunks($parcelverdir, $numchunks, $chunksize, $chunksperdir);
}

#
# makeparcel - Create a new, empty parcel
#
sub makeparcel ($$$$$) {
    my $userid = shift;      # Destination user id
    my $parcel = shift;      # Destination parcel name
    my $size = shift;        # Disk size
    my $memsize = shift;     # Memory image size
    my $vmm = shift;         # VMM type

    new_parcel($userid, $parcel, $memsize, $vmm, \&parse_disk_size,
			\&makeparcel_gen_chunks, $size);
}

#
# import - Create a parcel from a flat disk image
#
sub import ($$$$$) {
    my $userid = shift;      # Destination user id
    my $parcel = shift;      # Destination parcel name
    my $disk = shift;        # Path to disk image
    my $memsize = shift;     # Memory image size
    my $vmm = shift;         # VMM type

    new_parcel($userid, $parcel, $memsize, $vmm, \&get_image_size,
			\&import_chunks, $disk);
}

#
# export - Create a flat disk image from a shut-down parcel
#
sub export ($$$) {
    my $userid = shift;      # Destination user id
    my $parcel = shift;      # Destination parcel name
    my $file = shift;        # Path to output file

    my $parceldir = "$config{content_root}/$userid/$parcel";
    my $parcelverdir;
    my $parcelcfg;
    my $tempdir;
    my $suspended;
    my $chunksize;
    my $rh;
    my $fd;
    my %cfg;

    # Check parcel existence and get parameters
    $parcelcfg = get_parcelcfg_path($userid, $parcel);
    errexit("No such parcel $userid/$parcel")
	unless -d $parceldir and -e $parcelcfg;
    %cfg = get_values($parcelcfg);
    $parcelverdir = get_last_parcelverdir($parceldir);

    # Decode the memory image and make sure the parcel is shut down
    print "Decoding memory image...\n";
    $tempdir = tempdir("export-XXXXXX", DIR => $parcelverdir, CLEANUP => 1);
    ($rh, $fd) = keyroot_pipe($cfg{'KEYROOT'});
    system(LIBDIR . "/blobtool -etdp -i $parcelverdir/cfg.tgz.enc " .
			"-C $tempdir -k $fd") == 0
	or errexit("Couldn't extract cfg tarball");
    if (-e "$tempdir/cfg/suspended") {
	open(SUSPFLAG, "$tempdir/cfg/suspended")
	    or unix_errexit("Couldn't read suspended flag");
	$suspended = <SUSPFLAG>;
	close SUSPFLAG;
	chomp $suspended;
	$suspended eq "no"
	    or errexit("Cannot export a suspended parcel");
    }
    if ($cfgdir) {
	unless (-d $cfgdir) {
	    mkdir($cfgdir)
		or unix_errexit("Couldn't create $cfgdir");
	}
	copydir("$tempdir/cfg", $cfgdir);
    }
    
    # Decode the keyring
    ($rh, $fd) = keyroot_pipe($cfg{'KEYROOT'});
    system(LIBDIR . "/blobtool -ed -i $parcelverdir/keyring.enc " .
			"-o $tempdir/keyring -k $fd") == 0
	or errexit("Couldn't decode keyring");
    
    # Generate the image
    print "Writing disk image...\n";
    $chunksize = int($cfg{'CHUNKSIZE'}) / 1024;
    system(LIBDIR . "/disktool -o $file -d $parcelverdir -s $chunksize " .
			"-m $cfg{'CHUNKSPERDIR'} -k $tempdir/keyring -p") == 0
	or system_errexit("Couldn't export disk image");

    print "Success: Created $file from $userid/$parcel.\n";
}

#
# upgrade - Upgrade a parcel to the newest format
#
sub upgrade ($$) {
    my $userid = shift;
    my $parcel = shift;

    my $parcelcfg = get_parcelcfg_path($userid, $parcel);
    my %cfg = get_values($parcelcfg);
    my $curver = int($cfg{'VERSION'});

    my $minver = 3;
    my $maxver = 4;

    # Validate requested format version
    $format = $config{default_format}
        unless defined $format;
    errexit("Unknown format version specified")
        if $format < $minver or $format > $maxver;

    # See if we can upgrade this parcel
    errexit("Unrecognized format $curver for parcel $userid/$parcel.")
        if $curver < $minver or $curver > $maxver;
    errexit("Cannot downgrade parcel $userid/$parcel from format $curver.")
        if $curver > $format;
    if ($curver == $format) {
	print "Parcel $userid/$parcel is already at format $format.\n";
	return;
    }

    if ($format >= 4) {
	%cfg = (
	    # Defaults overridden by existing parcel.cfg values
	    MEM => 512,
	    BLOBCOMPRESS => 'gzip,lzf,lzma',
	    READONLY => 0,

	    %cfg,

	    # New values overriding the existing parcel.cfg
	    VERSION => $format
	);
    }
    write_parcel_cfg($parcelcfg, %cfg);
    print "Success: Parcel $userid/$parcel upgraded to format $format.\n"
}

#
# delparcel - Delete a user's parcel
#
sub delparcel ($$) {
    my $userid = shift;
    my $parcel = shift;

    my $parceldir = "$config{content_root}/$userid/$parcel";
    my $parcelcfg = get_parcelcfg_path($userid, $parcel);
    my $parcelcfgdir = dirname($parcelcfg);
    my $reply;

    errexit("No such parcel $userid/$parcel")
        if ! -d $parcelcfgdir and ! -d $parceldir;
    $reply = query("Do you really want to delete all data for $userid/$parcel?");
    if ($reply eq "y") {
	$reply = query("Are you really really sure?");
	if ($reply eq "y") {
	    print "Removing parcel $userid/$parcel...\n";
	    system("rm -rf $parcelcfgdir") == 0
	        or errexit("Couldn't remove $parcelcfgdir");
	    system("rm -rf $parceldir") == 0
	        or errexit("Couldn't remove $parceldir");
	}
    }
}

#
# getusage - Summarize the recent activity of each user
#
sub getusage () {
    my $userid;
    my $locklog;
    my $logentry;
    my $logdate;
    my $logstatus;
    my $msg;
    
    my @isrusers = ();
    my @parcels;

    # Generate the list of isr users
    opendir(HOMEDIR, "/home")
	or unix_errexit("Couldn't read /home");
    foreach $userid (grep(!/^\./, readdir(HOMEDIR))) {
	push(@isrusers, $userid)
	    if -d "/home/$userid/.isr";
    }
    closedir(HOMEDIR);

    # For each user and parcel, extract the last last entry in the 
    # lockholder log
    foreach $userid (sort @isrusers) {
	opendir(ISRDIR, "/home/$userid/.isr")
	    or unix_errexit("Couldn't read $userid's ISR directory");
	@parcels = sort grep(!/^\./, readdir(ISRDIR));
	foreach $parcel (@parcels) {
	    $locklog = "$config{content_root}/$userid/$parcel/lockholder.log";
	    
	    # Extract the date of the last release or acquire of this parcel
	    ($logdate, $logstatus) = ("Never", "");
	    if (-e $locklog) {
		$logentry = `tail -n 1 $locklog`;
		chomp($logentry);
		($logdate, $logstatus) = (split('\|', $logentry))[1,2]
		    if $logentry;
	    }
	    
	    # Now print the message
	    $msg = sprintf("%-25s $logdate\n", "$userid/$parcel");
	    if ($logstatus eq "released") {
		print GREEN, $msg, RESET;
	    } elsif ($logstatus eq "acquired") {
		print RED, $msg, RESET;
	    } else {
		print $msg;
	    }
	}
	closedir(ISRDIR);
	print "\n"
	    if @parcels;
    }
}


#############################
# Section 3: Helper functions
#############################

#
# query - Ask the user a question and return the reply.  If -f/--force was
#         specified, return "y" without prompting the user.
#
sub query ($) {
    my $question = shift;

    my $reply = "";

    return "y"
	if $force;

    # Keep asking until the user replies either y or n
    while ($reply ne "y" and $reply ne "n") {
	print "$question (y/n): ";
	$reply = <STDIN>;
	chomp($reply);
    }
    return $reply;
}

sub usage {
    my $msg = shift;
    my $progname;
    
    # Strip any path information from the program name
    ($progname = $0) =~ s#.*/##s;
    
    if ($msg) {
        print "Error: $msg\n";
    }
    
    print "$progname revision " . RCS_REVISION . "\n";
    print RED, "Usage: $progname cmd [options...]\n", RESET;
    print BLUE, "Commands: adduser, copyparcel, decrypt, delparcel, deluser, encrypt, export,\n";
    print "          getkeyroot, getusage, import, keygen, makeparcel, prune, upgrade.\n", RESET;

    print "  adduser    Add user to system (-u).\n";
    print "  deluser    Delete user from system (-u[f]).\n";
    print "  copyparcel Create a parcel based on an existing one (-upUP[s]).\n";
    print "  makeparcel Create an empty parcel from scratch (-upmsM[CT]).\n";
    print "  import     Create a parcel from a disk image (-upmMF[CQT]).\n";
    print "  export     Create a disk image from a parcel (-upF[C]).\n";
    print "  delparcel  Delete parcel from system (-up[f]).\n";
    print "  decrypt    Decrypt parcel version (-upv).\n";
    print "  encrypt    Encrypt parcel version (-upv).\n";
    print "  getkeyroot Show parcel keyroot (-up).\n";
    print "  getusage   List recent activity for each parcel (no args).\n";
    print "  keygen     Generate a keyroot (no args).\n";
    print "  prune      Prune old versions of a parcel (-upr[f]).\n";
    print "  upgrade    Upgrade a parcel to a newer format (-up[T]).\n";

    print "Options:\n";
    print "  -C,--cfgdir       Obtain/put the contents of the memory image here.\n";
    print "  -f,--force        Don't ask to confirm dangerous operations.\n";
    print "  -F,--file         Disk image file to import/export.\n";
    print "  -h,--help         Print help message (try '-hh' for some concrete examples).\n";
    print "  -m,--memsize      Size of the parcel's memory image in MB.\n";
    print "  -M,--vmm          Default VMM for the parcel.\n";
    print "  -p,--parcel       Parcel name (e.g., winxp).\n";
    print "  -P,--srcparcel    Source parcel name.\n";
    print "  -Q,--quick        Optimize for import speed rather than space.\n";
    print "  -r,--retain       How many of the most recent versions to retain when pruning.\n";
    print "  -s,--size         Size of the parcel's virtual disk (e.g. '256M', '8G')\n";
    print "  -T,--format       Parcel format version to use.\n";
    print "  -u,--userid       ISR userid.\n";
    print "  -U,--srcuserid    Username of source parcel.\n";
    print "  -v,--version      Version number to encrypt or decrypt.\n";
    print "  -V,--verbose      Increment verbosity level.\n";
    if ($help > 1) {
	print "\n";
	print "Examples:\n"; 
	print RED, "adduser - ", RESET, "Add user bovik to the system\n";
	print BLUE, "# isr_admin adduser -u bovik\n", RESET;
	print "\n";
	print RED, "deluser - ", RESET, "Delete user bovik from the system\n";
	print BLUE, "# isr_admin deluser -u bovik\n", RESET;
	print "\n";
	print RED, "copyparcel - ", RESET, "Create new parcel winxp for existing user bovik, using latest\n";
	print "version of existing parcel goldwinxp owned by user gold\n";
	print BLUE, "# isr_admin copyparcel -u bovik -p winxp -U gold -P goldwinxp\n", RESET;
	print "\nLikewise, but make the disk of the new parcel 10 GB\n";
	print BLUE, "# isr_admin copyparcel -u bovik -p winxp -U gold -P goldwinxp -s 10G\n", RESET;
	print "\n";
	print RED, "makeparcel - ", RESET, "Create empty parcel debian, with 512 MB memory image and 8 GB\n";
	print "disk, using VMware as the VMM, for existing user bovik\n";
	print BLUE, "# isr_admin makeparcel -u bovik -p debian -m 512 -s 8G -M vmware\n";
	print "\n";
	print RED, "import - ", RESET, "Create parcel debian from flat disk image debian.img, with 512 MB\n";
	print "memory image, using VirtualBox as the VMM, for existing user bovik\n";
	print BLUE, "# isr_admin import -u bovik -p debian -m 512 -M virtualbox -F debian.img\n";
	print "\n";
	print RED, "export - ", RESET, "Create flat disk image debian.img from shut-down parcel debian\n";
	print "belonging to user bovik\n";
	print BLUE, "# isr_admin export -u bovik -p debian -F debian.img\n";
	print "\n";
	print RED, "upgrade - ", RESET, "Upgrade parcel debian, belonging to user bovik, to the newest\n";
	print "on-disk format\n";
	print BLUE, "# isr_admin upgrade -u bovik -p debian\n";
	print "\n";
	print RED, "delparcel - ", RESET, "Delete all data for parcel winxp belonging to existing user bovik\n";
	print BLUE, "# isr_admin delparcel -u bovik -p winxp\n";
	print "\n";
	print RED, "decrypt - ", RESET, "Decrypt metadata for version 3 of parcel winxp belonging to user bovik\n";
	print BLUE, "# isr_admin decrypt -u bovik -p winxp -v 3\n", RESET;
	print "\n";
	print RED, "encrypt - ", RESET, "Encrypt metadata for version 3 of parcel winxp belonging to user bovik\n";
	print BLUE, "# isr_admin encrypt -u bovik -p winxp -v 3\n", RESET;
	print "\n";

	print RED, "getkeyroot - ", RESET, "Show the keyroot for parcel bovik/winxp\n";
	print BLUE, "# isr_admin getkeyroot -u bovik -p winxp\n", RESET;
	print "\n";

	print RED, "getusage - ", RESET, "List recent activity for each parcel\n";
	print BLUE, "# isr_admin getusage\n", RESET;
	print "\n";

	print RED, "keygen - ", RESET, "Generate a random key root\n";
	print BLUE, "# isr_admin keygen\n", RESET;
	print "\n";

	print RED, "prune - ", RESET, "Prune all but the last 10 versions of the winxp parcel owned by\n";
	print "user bovik\n";
	print BLUE, "# isr_admin prune -u bovik -p winxp -r 10\n", RESET;
    }
    exit 0;
}
