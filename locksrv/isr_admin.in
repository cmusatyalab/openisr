#!!!PERLPATH!!

##########################################################
# isr_admin - Perform various ISR administrative functions
##########################################################

#
#                     Internet Suspend/Resume (R)
#           A system for capture and transport of PC state
#
#              Copyright (c) 2002-2004, Intel Corporation
#         Copyright (c) 2004-2007, Carnegie Mellon University
#
# This software is distributed under the terms of the Eclipse Public
# License, Version 1.0 which can be found in the file named LICENSE.Eclipse.
# ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS SOFTWARE CONSTITUTES
# RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT
#

##############################
# Section 0: Standard prologue
##############################
use strict;
use Getopt::Long;
use File::stat;
use File::Basename;
use Socket;
use Sys::Hostname;
use Term::ANSIColor qw(:constants);
use lib "!!SHAREDIR!!";
use Server;
$| = 1; # Autoflush output on every print statement

use constant {
	RCS_REVISION => "!!REVISION!!",
	LIBDIR => "!!LIBDIR!!",
	CHUNKSIZE => 131072,
	CHUNKSPERDIR => 512,
};

# Function prototypes
sub encrypt ($$$$);
sub decrypt ($$$$);
sub getkeyroot ($$);
sub adduser ($);
sub deluser ($);
sub init_parceldir ($$);
sub finalize_parceldir ($$);
sub gen_uuid ();
sub copyparcel ($$$$);
sub makeparcel ($$$);
sub prune ($$$);
sub getusage ();
sub keygen ();
sub query ($);

#########################
# Section 1: Main routine
#########################

#
# Variables
#
my $result;
my $target;

# Command line
my $help;
my $parceldir;
my $parcel;
my $srcparcel;
my $verbose;
my $command;
my $keyroot;
my $userid;
my $srcuserid;
my $retain;
my $version;
my $size;

# Server configuration
my %config = get_config();

#
# Parse the command line args
#
Getopt::Long::Configure("no_ignore_case", "bundling_override");
$result = GetOptions(
                     "h|help+"         => \$help,
                     "p|parcel=s"      => \$parcel,
                     "P|srcparcel=s"   => \$srcparcel,
                     "r|retain=i"      => \$retain,
                     "s|size=s"        => \$size,
                     "u|userid=s"      => \$userid,
                     "U|srcuserid=s"   => \$srcuserid,
                     "v|version=i"     => \$version,
                     "V|verbose+"      => \$verbose,
                     );
if ($result == 0 or $help) {
    usage();
}

#
# Extract the command name
#
if (@ARGV == 0) {
    usage("Missing command.");
}
if (@ARGV > 1) {
    usage("Too many commands.");
}
$command = $ARGV[0];

#
# Handle the special case where someone types "admin help"
#
if ($command eq "help") {
    usage();
}

#
# Make sure we have all the arguments we need for each command
#
if ($command eq "encrypt" or 
     $command eq "decrypt") {
    usage("Missing userid (-u)")
	if (!$userid);
    usage("Missing parcel (-p)")
	if (!$parcel);
    usage("Missing version (-v)")
	if (!defined($version));
    usage("Non-positive version number ($version)")
	if ($version < 1);
}

if ($command eq "getkeyroot") {
    usage("Missing userid (-u)")
	if (!$userid);
    usage("Missing parcel name (-p)")
	if (!$parcel);
}

if ($command eq "adduser") {
    usage("Missing userid (-u)")
	if (!$userid);
}

if ($command eq "deluser") {
    usage("Missing userid (-u)")
	if (!$userid);
}

if ($command eq "copyparcel") {
    usage("Missing userid (-u)")
	if (!$userid);
    usage("Missing parcel name (-p)")
	if (!$parcel);
    usage("Missing source userid (-U)")
    	if (!$srcuserid);
    usage("Missing source parcel (-P)")
	if (!$srcparcel);
}

if ($command eq "makeparcel") {
    usage("Missing userid (-u)")
        if (!$userid);
    usage("Missing parcel name (-p)")
	if (!$parcel);
    usage("Missing parcel size (-s)")
        if (!$size);
}

if ($command eq "prune") {
    usage("Missing userid (-u)")
	if (!$userid);
    usage("Missing parcel name (-p)")
	if (!$parcel);
    usage("Missing number of versions to retain (-r)")
	if (!defined($retain));
}

#
# Process the command
#
if ($command eq "encrypt") {
    $keyroot = getkeyroot($userid, $parcel);
    encrypt($userid, $parcel, $version, $keyroot);
}
elsif ($command eq "decrypt") {
    $keyroot = getkeyroot($userid, $parcel);
    decrypt($userid, $parcel, $version, $keyroot);
}
elsif ($command eq "keygen") {
    $result = keygen();
    print "$result\n";
}
elsif ($command eq "getkeyroot") {
    $result = getkeyroot($userid, $parcel);
    print "$result\n";
}
elsif ($command eq "adduser") {
    adduser($userid);
}
elsif ($command eq "deluser") {
    deluser($userid);
}
elsif ($command eq "copyparcel") {
    copyparcel($userid, $parcel, $srcuserid, $srcparcel);
}
elsif ($command eq "makeparcel") {
    makeparcel($userid, $parcel, $size);
}
elsif ($command eq "prune") {
    prune($userid, $parcel, $retain);
}
elsif ($command eq "getusage") {
    getusage();
}
else {
    usage("$command is an invalid command.");
}
exit 0;


####################################
# Section 2: Definitions of commands
####################################
#
# prune - Prune all but the last "retain" versions of a parcel
#
sub prune ($$$) {
    my $userid = shift;
    my $parcel = shift;
    my $retain = shift; 

    my $parceldir;
    my @files;
    my $firstver;
    my $lastver;
    my $lastvertoprune;
    my $i;
    my $dirpath;
    my $dirname;
    my $reply;

    $parceldir = "$config{content_root}/$userid/$parcel";
    
    # Not allowed to prune all of the versions!
    if ($retain < 1) {
	errexit("You must retain at least one file when pruning.");
    }

    # Get the list of versions
    opendir(DIR, $parceldir)
	or unix_errexit("Could not open directory $parceldir");
    @files = grep(/^\d+$/, readdir(DIR));
    closedir(DIR);


    # Determine the first, last, and last version to prune
    @files = reverse sort @files;
    $lastver = int($files[0]);
    $lastvertoprune = $lastver - $retain;

    @files = sort @files;
    $firstver = int($files[0]);


    # There may not be anything to do
    if ($lastvertoprune < $firstver) {
	print "No files pruned.\n";
	return;
    }

    # Prune versions $firstver to $lastver - $retain
    $reply = query("Deleting versions $firstver to $lastvertoprune. Proceed?");
    if ($reply eq "y") {
	for ($i = $firstver; $i <= $lastvertoprune; $i++) {
	    $dirname = sprintf("%06d", $i);
	    $dirpath = "$parceldir/$dirname";
	    print "Deleting $dirpath...\n";
	    system("rm -rf $dirpath") == 0
		or system_errexit("Unable to delete $dirpath.");
	}
    }
}

#
# encrypt - Encrypts an unencrypted parcel
#
sub encrypt ($$$$) {
    my $userid = shift;
    my $parcel = shift;
    my $version = shift;
    my $keyroot = shift;

    my $versionname = sprintf("%06d", $version);
    my $parceldir = "$config{content_root}/$userid/$parcel/$versionname";
    my $rh;
    my $fd;

    foreach $target ("cfg.tgz", "keyring") {
	print("Encrypting $target.\n")
	    if $verbose;
	if (!-e "$parceldir/$target") {
	    errexit("Missing $parceldir/$target.\n");
	}
	($rh, $fd) = keyroot_pipe($keyroot);
        if (system("openssl enc -aes-128-cbc -in $parceldir/$target -out $parceldir/$target.enc -pass fd:$fd -salt") != 0) {
            system_errexit("Unable to encrypt $parceldir/$target.");
	}
	unlink("$parceldir/$target");
    }
}

#
# decrypt - Decrypts an encrypted parcel
#
sub decrypt ($$$$) {
    my $userid = shift;
    my $parcel = shift;
    my $version = shift;
    my $keyroot = shift;

    my $versionname = sprintf("%06d", $version);
    my $parceldir = "$config{content_root}/$userid/$parcel/$versionname";
    my $rh;
    my $fd;
    my $umask;

    $umask = umask(0077);
    foreach $target ("cfg.tgz", "keyring") {
	print("Decrypting $target.enc.\n")
	    if $verbose;
	if (!-e "$parceldir/$target.enc") {
	    errexit("Missing $parceldir/$target.enc.\n");
	}
	($rh, $fd) = keyroot_pipe($keyroot);
	if (system("openssl enc -d -aes-128-cbc -in $parceldir/$target.enc -out $parceldir/$target -pass fd:$fd -salt") != 0) {
            system_errexit("Unable to decrypt $parceldir/$target.");
	}
	unlink("$parceldir/$target.enc");
    }
    umask($umask);
}

#
# keygen - Generate a keyroot
#
sub keygen () {
    my $keyroot = `openssl rand -rand /dev/urandom -base64 15 2>/dev/null`;
    $? == 0
        or errexit("Couldn't generate keyroot");
    chomp($keyroot);
    return $keyroot;
}

#
# getkeyroot - Return the keyroot for a parcel
#
sub getkeyroot ($$) {
    my $userid = shift;
    my $parcel = shift;

    return get_value(get_parcelcfg_path($userid, $parcel), "KEYROOT");
}


#
# adduser - Add a new user
#
sub adduser ($) {
    my $userid = shift;

    my $sshdir = "/home/$userid/.ssh";
    my $isrdir = "/home/$userid/.isr";

    # Create the user's account 
    print "Adding $userid...\n";
    system("/usr/sbin/useradd -d /home/$userid -m $userid") == 0
	or err("Unable to create new account for $userid");

    # Change the password
    system("echo \"$userid:$config{default_pass}\" | chpasswd -m") == 0
	or errexit("Unable to change password for $userid");
    if (!-d $isrdir) {
	mkdir("$isrdir")
	    or unix_errexit("Unable to make .isr directory for $userid");
    }

    # Set the file permissions
    system("chown $userid:$userid $isrdir") == 0
	or errexit("Unable to chown .isr ownership to $userid");
    system("chmod 700 /home/$userid") == 0
    	or errexit("Unable to set /home/$userid permissions to 700");

    # Add the public and private ssh keys to the user's account
    if (!-d $sshdir) {
	mkdir("$sshdir") 
	    or unix_errexit("Unable to make .ssh directory for $userid");
    }
    system("chown $userid:$userid $sshdir") == 0
	or errexit("Unable to chown .ssh ownership to $userid");
    system("ssh-keygen -C $userid -t rsa -f $sshdir/id_rsa -P ''") == 0
	or errexit("Unable to generate ssh keys for $userid");
    system("cp $sshdir/id_rsa.pub $sshdir/authorized_keys") == 0
	or errexit("Unable to create authorized_keys file");
    system("chown $userid:$userid $sshdir/id_rsa $sshdir/id_rsa.pub $sshdir/authorized_keys") == 0
	or errexit("Unable to chown key files to $userid");

    print "Success: $userid added to server\n";
}

#
# deluser - Delete all traces of an ISR user
#
sub deluser ($) {
    my $userid = shift;

    my $reply;

    #
    # Remove a user's account and everything in their home directory
    #
    $reply = query("Do you really want to delete all files for $userid?");
    if ($reply eq "y") {
	$reply = query("Are you really really sure?");
	if ($reply eq "y") {
	    print "Removing $userid...\n";
	    system("/usr/sbin/userdel -r $userid");
	} else {
	    print "Did not delete the account for $userid.\n";
	}
    }
}

#
# init_parceldir - Helper to create a new parcel directory
#
sub init_parceldir ($$) {
    my $userid = shift;
    my $parcel = shift;
    
    my $umask;
    
    my $userdir = "$config{content_root}/$userid";
    my $parceldir = "$userdir/$parcel";
    my $parcelcfg = get_parcelcfg_path($userid, $parcel);
    my $parcelcfgdir = dirname($parcelcfg);
    
    errexit("Parcel $userid/$parcel exists.")
        if -d $parceldir;
    
    # Create new content directory for this user if one doesn't already exist
    if (!-d $userdir) {
	mkdir($userdir)
	    or unix_errexit("Unable to create user directory ($userdir)");
	system("chown $userid:$userid $userdir") == 0
	    or errexit("Unable to set owner of $userdir");
	system("chmod 755 $userdir" ) == 0
	    or errexit("Unable to set permissions on $userdir");
    }	

    # Create empty directories for the parcel
    mkdir($parceldir)
	or unix_errexit("Unable to make directory $parceldir.");
    mkdir("$parceldir/cache")
	or unix_errexit("Unable to make directory $parceldir/cache.");
    $umask = umask(0077);
    mkdir($parcelcfgdir)
	or unix_errexit("Unable to make directory $parcelcfgdir.");
    umask($umask);
    
    return ($parceldir, $parcelcfg);
}

#
# finalize_parceldir - Helper to finish setting up a newly-created parcel dir
#
sub finalize_parceldir ($$) {
    my $userid = shift;
    my $parcel = shift;
    
    my $parceldir = "$config{content_root}/$userid/$parcel";
    my $parcelcfgdir = dirname(get_parcelcfg_path($userid, $parcel));
    
    # Set the appropriate ownership and permissions for the parceldir,
    # and create the last symlink
    symlink("000001", "$parceldir/last")
        or errexit("Unable to create last symlink");
    system("chown -R $userid:$userid $parceldir") == 0
	or errexit("Unable to set owner of $parceldir");
    system("chmod -R u=rwX,go=rX $parceldir") == 0
	or errexit("Unable to set permissions of $parceldir");
    
    # Set ownership for the parcel.cfg directory
    system("chown -R $userid:$userid $parcelcfgdir") == 0
	or errexit("Unable to set owner of $parcelcfgdir");
}

#
# gen_uuid - Generate a new UUID
#
sub gen_uuid () {
    my $uuid = `uuidgen`;
    $? == 0
	or errexit("Couldn't generate UUID");
    chomp($uuid);
    return $uuid;
}

#
# copyparcel - Create a new parcel based on an existing one
#             
sub copyparcel ($$$$) {
    my $userid = shift;      # Destination user id
    my $parcel = shift;      # Destination parcel name
    my $srcuserid = shift;   # Source user id
    my $srcparcel = shift;   # Source parcel name

    my $dstparcelcfg;
    my $parceldir;
    my $lastver;
    my $srckeyroot;
    my $dstkeyroot;
    my $uuid;
    my $umask;
    my @files;

    my $srcpath = "$config{content_root}/$srcuserid/$srcparcel";
    my $srcparcelcfg = get_parcelcfg_path($srcuserid, $srcparcel);

    # Create new content directory for this user and parcel
    ($parceldir, $dstparcelcfg) = init_parceldir($userid, $parcel);

    # Determine the last version that was checked in (note that
    # we can't use the last link because it might not be the
    # same on the nfs server
    opendir(DIR, $srcpath)
	or unix_errexit("Could not open directory $srcpath");
    @files = reverse sort grep(/^\d+$/, readdir(DIR));
    closedir(DIR);
    $lastver = sprintf("%06d", int($files[0]));

    # Copy the most recent source parcel to the destination
    print "Copying $srcpath/$lastver to $parceldir/000001...\n";
    system("cp -R $srcpath/$lastver $parceldir/000001") == 0
	or errexit("Unable to copy $srcpath/$lastver to $parceldir/000001");

    # Re-encrypt the destination with a new keyroot
    $srckeyroot = get_value($srcparcelcfg, "KEYROOT");
    $dstkeyroot = keygen();
    decrypt($userid, $parcel, 1, $srckeyroot);
    encrypt($userid, $parcel, 1, $dstkeyroot);
    
    # Write out the new parcel.cfg
    $uuid = gen_uuid();
    $umask = umask(0077);
    open(IN, $srcparcelcfg)
    	or unix_errexit("Couldn't read $srcparcelcfg");
    open(OUT, ">", $dstparcelcfg)
    	or unix_errexit("Couldn't write $dstparcelcfg");
    while (<IN>) {
	if (/^KEYROOT/) {
	    print OUT "KEYROOT = $dstkeyroot\n";
	} elsif (/^UUID/) {
	    print OUT "UUID = $uuid\n";
	} else {
	    print OUT;
	}
    }
    close IN;
    close OUT;
    umask($umask);
    
    # Set ownership and permissions, add last symlink, etc.
    finalize_parceldir($userid, $parcel);

    print "Success: Added $userid/$parcel\n";
}

#
# makeparcel - Create a new, empty parcel
#
sub makeparcel ($$$) {
    my $userid = shift;      # Destination user id
    my $parcel = shift;      # Destination parcel name
    my $size = shift;        # Parcel size

    my $parcelcfg;
    my $parceldir;
    my $parcelverdir;
    my $keyroot;
    my $uuid;
    my $umask;
    my $shift;
    my $numchunks;
    my $numdirs;
    my $maxkb;
    my $data;
    my $key;
    my $tag;
    my $i;
    my $j;
    my $ifmt;
    my $jfmt;

    my $chunksize = CHUNKSIZE;
    my $chunksperdir = CHUNKSPERDIR;

    # Create new content directory for this user and parcel
    ($parceldir, $parcelcfg) = init_parceldir($userid, $parcel);
    $parcelverdir = "$parceldir/000001";

    # Calculate parcel size
    unless ($size =~ /^([0-9]+)([KMG])$/) {
	errexit("Can't parse specified parcel size '$size'");
    }
    if ($2 eq "K") {
	$shift = 0;
    } elsif ($2 eq "M") {
	$shift = 10;
    } elsif ($2 eq "G") {
	$shift = 20;
    }
    # Avoid integer overflow on 32-bit systems
    $numchunks = ($1 << $shift) / ($chunksize >> 10);
    $numdirs = int(($numchunks + $chunksperdir - 1) / $chunksperdir);
    $maxkb = ($chunksize >> 10) * $numchunks * 2;
    
    # Generate a single, zeroed chunk
    print "Generating chunk directories...\n";
    system("dd if=/dev/zero bs=$chunksize count=1 2> /dev/null| " .
	            LIBDIR . "/zlib > /tmp/chunk.$$") == 0
        or errexit("Unable to generate zeroed chunk");
    $key = `openssl sha1 < /tmp/chunk.$$`
        or errexit("Unable to generate key");
    chomp $key;
    system("openssl enc -aes-128-cbc -in /tmp/chunk.$$ -out /tmp/chunk2.$$ " .
	            "-nosalt -iv 0 -K $key") == 0
        or errexit("Unable to encrypt chunk");
    $tag = `openssl sha1 < /tmp/chunk2.$$`
        or errexit("Unable to generate tag");
    chomp $tag;
    open(FD, "/tmp/chunk2.$$")
        or errexit("Unable to read encrypted chunk");
    read(FD, $data, $chunksize)
        or errexit("Unable to read encrypted chunk data");
    close(FD);
    unlink("/tmp/chunk.$$", "/tmp/chunk2.$$");
    
    # Generate the chunk tree
    mkdir($parcelverdir)
        or errexit("Can't make parcel version directory");
    mkdir("$parcelverdir/hdk")
        or errexit("Can't make hdk directory");
    for ($i = 0; $i < $numdirs; $i++) {
	$ifmt = sprintf("%04d", $i);
	mkdir("$parcelverdir/hdk/$ifmt")
	    or errexit("Can't make $ifmt directory");
	for ($j = 0; $j < $chunksperdir; $j++) {
	    last if $i * $chunksperdir + $j >= $numchunks;
	    $jfmt = sprintf("%04d", $j);
	    open(FD, ">", "$parcelverdir/hdk/$ifmt/$jfmt")
	        or errexit("Can't write $ifmt/$jfmt");
	    print FD $data;
	    close(FD);
	}
    }
    
    # Generate the keyring
    print "Generating keyring and memory image...\n";
    system(LIBDIR . "/query $parcelverdir/keyring " .
	            "'PRAGMA auto_vacuum = 0; " .
	            "PRAGMA legacy_file_format = ON; " .
		    "PRAGMA user_version = 1; " .
		    "CREATE TABLE keys (" . 
		    "chunk INTEGER PRIMARY KEY NOT NULL, " .
		    "tag BLOB NOT NULL, " .
		    "key BLOB NOT NULL, " .
		    "compression INTEGER NOT NULL); " .
		    "CREATE INDEX keys_tags ON keys (tag)'") == 0
        or errexit("Couldn't create keyring");
    # zlib is compresstype 2
    system(LIBDIR . "/query $parcelverdir/keyring " .
	            "'INSERT INTO keys (chunk, tag, key, compression) " .
		    "VALUES (?, ?, ?, 2)' -i -b $tag -b $key " .
		    "-r 0:" . ($numchunks - 1) . " > /dev/null") == 0
        or errexit("Couldn't populate keyring");
    
    # Generate an empty cfg tarball
    mkdir("$parcelverdir/cfg")
        or errexit("Couldn't create cfg directory");
    if (-d "/etc/openisr/skel") {
	system("cp -r /etc/openisr/skel/* $parcelverdir/cfg") == 0
	    or errexit("Couldn't copy /etc/openisr/skel");
    }
    system("tar czf $parcelverdir/cfg.tgz -C $parcelverdir cfg") == 0
        or errexit("Couldn't generate cfg tarball");
    system("rm -rf $parcelverdir/cfg") == 0
	or errexit("Couldn't remove cfg directory");
    
    # Encrypt the parcel with a new keyroot
    print "Encrypting metadata...\n";
    $keyroot = keygen();
    encrypt($userid, $parcel, 1, $keyroot);
    
    # Write out the new parcel.cfg
    print "Finishing...\n";
    $uuid = gen_uuid();
    $umask = umask(0077);
    open(OUT, ">", $parcelcfg)
    	or unix_errexit("Couldn't write $parcelcfg");
    print OUT <<EOF;
VERSION = 3
UUID = $uuid
VMM = vmware
CRYPTO = aes-sha1
COMPRESS = zlib,lzf
KEYROOT = $keyroot
USER = $userid
PARCEL = $parcel
PROTOCOL = HTTPSSH
SERVER = $config{hostname}
RPATH = http://$config{hostname}
WPATH = $config{hostname}:$config{content_root}
MAXKB = $maxkb
CHUNKSIZE = $chunksize
NUMCHUNKS = $numchunks
CHUNKSPERDIR = $chunksperdir
EOF
    close OUT;
    umask($umask);

    # Set ownership and permissions, add last symlink, etc.
    finalize_parceldir($userid, $parcel);
    
    print "Success: Added $userid/$parcel\n";
}

#
# getusage - Summarize the recent activity of each user
#
sub getusage () {
    my $userid;
    my $locklog;
    my $sessionlog;
    my $logentry;
    my $logdate;
    my $logstatus;
    my $lastcmd;
    my $lastdate;
    my $lastlog;
    my $msg;
    
    my @isrusers = ();

    # Generate the list of isr users
    opendir(HOMEDIR, "/home")
	or unix_errexit("Couldn't read /home");
    foreach $userid (grep(!/^\./, readdir(HOMEDIR))) {
	push(@isrusers, $userid)
	    if -d "/home/$userid/.isr";
    }
    closedir(HOMEDIR);

    # For each user and parcel, extract the last last entry in the 
    # lockholder log
    foreach $userid (sort @isrusers) {
	opendir(ISRDIR, "/home/$userid/.isr")
	    or unix_errexit("Couldn't read $userid's ISR directory");
	foreach $parcel (sort grep(!/^\./, readdir(ISRDIR))) {
	    $locklog = "$config{content_root}/$userid/$parcel/lockholder.log";
	    $sessionlog = "$config{content_root}/$userid/$parcel/session.log";
	    
	    # Extract the date of the last release or acquire of this parcel
	    if (-e $locklog) {
		$logentry = `tail -n 1 $locklog`;
		chomp($logentry);
		($logdate, $logstatus) = (split('\|', $logentry))[1,2];
	    } else {
		($logdate, $logstatus) = ("Never", "");
	    }
	    
	    # Extract the date of the last activity of any kind on this parcel
	    if (-e $sessionlog) {
		$lastlog = `egrep 'Running\ [^ ]+\$' $sessionlog | tail -n 1`;
		chomp($lastlog);
		if ($lastlog =~ /^(([^ ]+ ){3}[^ ]+) [0-9]+ Running ([a-zA-Z]+)$/) {
		    ($lastdate, $lastcmd) = ($1, $3);
		} else {
		    $lastdate = $lastcmd = "Unknown";
		}
	    } else {
		$lastdate = $lastcmd = "Never";
	    }
	    
	    # Now print the message
	    $msg = "$userid/$parcel $logdate [$lastcmd $lastdate]\n";
	    if ($logstatus eq "released") {
		print GREEN, $msg, RESET;
	    } elsif ($logstatus eq "acquired") {
		print RED, $msg, RESET;
	    } else {
		print $msg;
	    }
	}
	closedir(ISRDIR);
	print "\n";
    }
}


#############################
# Section 3: Helper functions
#############################

#
# query - Ask the user a question and return the reply
#
sub query ($) {
    my $question = shift;

    my $reply;

    print "$question (y/n): ";
    $reply = <STDIN>;
    chomp($reply);

    # Keep asking until the user replies either y or n
    while ($reply ne "y" and $reply ne "n") {
	print "$question (y/n): ";
	$reply = <STDIN>;
	chomp($reply);
    }
    return $reply;
}

sub usage {
    my $msg = shift;
    my $progname;
    my $croot;
    
    # Strip any path information from the program name
    ($progname = $0) =~ s#.*/##s;
    ($croot = $config{content_root}) =~ s:/$::;
    
    if ($msg) {
        print "Error: $msg\n";
    }
    
    print "$progname revision " . RCS_REVISION . "\n";
    print RED, "Usage: $progname cmd [options...]\n", RESET;
    print BLUE, "Commands: adduser, copyparcel, decrypt, deluser, encrypt, getkeyroot,\n          getusage, keygen, makeparcel, prune.\n", RESET;

    print "  adduser    Add user to system (-u).\n";
    print "  deluser    Delete user from system (-u).\n";
    print "  copyparcel Create a parcel based on an existing one (-u, -p, -U, -P).\n";
    print "  makeparcel Create an empty parcel from scratch (-u, -p, -s).\n";
    print "  decrypt    Decrypt parcel version (-u, -p, -v).\n";
    print "  encrypt    Encrypt parcel version (-u, -p, -v).\n";
    print "  getkeyroot Show parcel keyroot (-u, -p).\n";
    print "  getusage   List recent activity for each parcel (no args)\n";
    print "  keygen     Generate a keyroot (no args).\n";
    print "  prune      Prune old versions of a parcel (-u, -p, -r).\n";

    print "Options:\n";
    print "  -h,--help         Print help message (Try '-hh' for some concrete examples).\n";
    print "  -p,--parcel       Parcel name (e.g., winxp).\n";
    print "  -P,--srcparcel    Source parcel name.\n";
    print "  -r,--retain       How many of the most recent versions to retain when pruning.\n";
    print "  -s,--size         Size of the parcel's virtual disk (e.g. '256M', '8G')\n";
    print "  -u,--userid       ISR userid.\n";
    print "  -U,--srcuserid    Username of source parcel.\n";
    print "  -v,--version      Version number to encrypt or decrypt.\n";
    print "  -V,--verbose      Increment verbosity level.\n";
    if ($help > 1) {
	print "\n";
	print "Examples:\n"; 
	print RED, "adduser - ", RESET, "Add user bovik to the system\n";
	print BLUE, "% isr_admin adduser -u bovik\n", RESET;
	print "\n";
	print RED, "deluser - ", RESET, "Delete user bovik from the system\n";
	print BLUE, "% isr_admin deluser -u bovik\n", RESET;
	print "\n";
	print RED, "copyparcel - ", RESET, "Create new parcel winxp for existing user bovik in $croot\n";
	print "using latest version of existing parcel in $croot/gold/goldwinxp\n";
	print BLUE, "% isr_admin addparcel -u bovik -p winxp -U gold -Pgoldwinxp\n", RESET;
	print "\n";
	print RED, "makeparcel - ", RESET, "Create empty 8 GB parcel debian for existing user bovik\n";
	print "in $croot\n";
	print BLUE, "% isr_admin makeparcel -u bovik -p debian -s 8G\n";
	print "\n";
	print RED, "decrypt - ", RESET, "Decrypt files in $croot/bovik/winxp/00003\n";
	print BLUE, "% isr_admin decrypt -u bovik -p winxp -v 3\n", RESET;
	print "\n";
	print RED, "encrypt - ", RESET, "Encrypt files in $croot/bovik/winxp/00003\n";
	print BLUE, "% isr_admin encrypt -u bovik -p winxp -v 3\n", RESET;
	print "\n";

	print RED, "getkeyroot - ", RESET, "Show the keyroot for parcel bovik/winxp\n";
	print BLUE, "% isr_admin getkeyroot -u bovik -p winxp\n", RESET;
	print "\n";

	print RED, "getusage - ", RESET, "List recent activity for each parcel\n";
	print BLUE, "% isr_admin getusage\n", RESET;
	print "\n";

	print RED, "keygen - ", RESET, "Generate a random key root\n";
	print BLUE, "% isr_admin keygen\n", RESET;
	print "\n";

	print RED, "prune - ", RESET, "Prune all but the last 10 versions of the parcel stored at\n";
	print "$croot/bovik/winxp.\n";
	print BLUE, "% isr_admin prune -u bovik -p winxp -r 10\n", RESET;
    }
    exit 0;
}
