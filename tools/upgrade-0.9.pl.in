#!!!PERLPATH!!
#
# upgrade-0.9 - Tool to generate an OpenISR (R) 0.9 parcel from an 0.8 parcel
#
# Copyright (C) 2007 Carnegie Mellon University
#
# This software is distributed under the terms of the Eclipse Public
# License, Version 1.0 which can be found in the file named LICENSE.Eclipse.
# ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS SOFTWARE CONSTITUTES
# RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT
#

use File::Copy;
use File::Path;
use File::stat;
use Fcntl;
use strict;
use warnings;

our $srccfg = $ARGV[0];
our $src = $ARGV[1];
our $dstcfg = $ARGV[2];
our $dst = $ARGV[3];
our $user = $ARGV[4];
our $parcel = $ARGV[5];
our $bindir = "!!LIBDIR!!";
our @versions;
our %parcelcfg;
our $new_keyroot;

# Return a handle to a pipe, and its corresponding fd, from which can be read
# the specified string
sub keyroot_pipe {
	my $keyroot = shift;

	my $rh;
	my $wh;
	my $flags;

	# Each end is automatically closed when it goes out of scope
	pipe($rh, $wh) or die;
	# Clear close-on-exec flag for the read end
	$flags = fcntl($rh, F_GETFD, 0);
	fcntl($rh, F_SETFD, $flags & ~FD_CLOEXEC);
	print $wh "$keyroot\n";
	# We can't just return fileno($rh) because $rh would drop out of scope
	return ($rh, fileno($rh));
}

sub gen_keyroot {
	open(KR, "-|", "openssl rand -rand /dev/urandom -base64 15 2>/dev/null")
		or die;
	$new_keyroot = <KR>;
	close KR;
	$? == 0 or die;
	chomp $new_keyroot;
}

sub process_parcel_cfg {
	my $file;
	my $key;
	my $uuid;

	print "Generating new parcel.cfg...\n";
	foreach $file ($srccfg, "$src/last/hdk/index.lev1") {
		open(IF, $file) or die "Couldn't open $file";
		foreach (<IF>) {
			/^([A-Z]+)[ =]+(.+)$/ or die;
			$parcelcfg{$1} = $2;
		}
		close IF;
	}
	$uuid = `uuidgen`;
	die if $? or !defined $uuid;
	chomp $uuid;
	die "File $dstcfg already exists" if -e $dstcfg;
	open(OF, ">$dstcfg") or die;
	print OF <<EOF;
VERSION = 3
UUID = $uuid
VMM = vmware
CRYPTO = aes-sha1
COMPRESS = zlib,lzf
KEYROOT = $new_keyroot
USER = $user
PARCEL = $parcel
EOF
	foreach $key ("PROTOCOL", "SERVER", "RPATH", "WPATH", "MAXKB",
				"CHUNKSIZE", "NUMCHUNKS", "CHUNKSPERDIR") {
		die unless defined $parcelcfg{$key};
		print OF "$key = $parcelcfg{$key}\n";
	}
	die unless defined $parcelcfg{"KEYROOT"};
	close OF;
}

sub init_dest {
	print "Initializing destination directory...\n";
	die "Destination $dst already exists" if -e $dst;
	mkpath "$dst/cache";
	if (-e "$src/lockholder.log") {
		copy("$src/lockholder.log", "$dst/lockholder.log") or die;
	}
	die if ! -l "$src/last";
	symlink(readlink("$src/last"), "$dst/last") or die;
}

sub prepare_version {
	my $ver = shift;
	my $keyroot = $parcelcfg{"KEYROOT"};
	my $rh;
	my $fd;

	print "Unpacking version $ver...\n";
	die unless -e "$src/$ver/cfg.tgz.enc" && -e "$src/$ver/keyring.enc";
	mkpath "$dst/$ver";
	($rh, $fd) = keyroot_pipe($keyroot);
	system("openssl enc -d -bf -in '$src/$ver/cfg.tgz.enc' " .
				"-pass 'fd:$fd' -nosalt | " .
				"tar xzC '$dst/$ver'") == 0 or die;
	if (! -e "$dst/$ver/cfg/keyring.bin") {
		($rh, $fd) = keyroot_pipe($keyroot);
		system("openssl enc -d -bf -in '$src/$ver/keyring.enc' " .
				"-out '$dst/$ver/keyring.old' " .
				"-pass 'fd:$fd' -nosalt") == 0
				or die;
	}
}

sub upgrade_keyring {
	my $ver = shift;

	print "Converting keyring for $ver...\n";
	if (-e "$dst/$ver/cfg/keyring.bin") {
		system("$bindir/convert-keyring -b " .
					"'$dst/$ver/cfg/keyring.bin' " .
					"'$dst/$ver/keyring'") == 0 || die;
	} elsif (-e "$dst/$ver/keyring.old") {
		system("$bindir/convert-keyring '$dst/$ver/keyring.old' " .
					"'$dst/$ver/keyring'") == 0 || die;
	} else {
		die;
	}
	unlink(glob("$dst/$ver/cfg/keyring.bin*"), "$dst/$ver/keyring.old");
}

sub update_chunks {
	my $ver = shift;

	print "Updating chunks for $ver...\n";
	mkdir("$dst/$ver/hdk") or die;
	system("$bindir/convert-chunks '$dst/mapdb' '$dst/$ver/keyring' " .
				"'$src/$ver/hdk' '$dst/$ver/hdk' " .
				$parcelcfg{"CHUNKSPERDIR"}) == 0 or die;
}

sub rewrite_keyring {
	my $ver = shift;
	my $result;

	print "Updating keyring for $ver...\n";
	# The only way to do cross-table updates in SQLite (without using
	# temporary tables or INSERT OR REPLACE) is to have multiple
	# sub-selects in the UPDATE statement, one per column, and those
	# sub-selects aren't optimized out.  We go the INSERT OR REPLACE route.
	open(RES, "-|", "$bindir/query", "$dst/$ver/keyring", "-a",
				"map:$dst/mapdb",
				"INSERT OR REPLACE INTO keys " .
				"(chunk, tag, key, compression) " .
				"SELECT keys.chunk, map.tags.new_tag, " .
				"map.tags.new_key, map.tags.new_compress " .
				"FROM keys JOIN map.tags ON " .
				"keys.tag = map.tags.old_tag") or die;
	<RES> =~ /([0-9]+) rows updated/ or die;
	close(RES);
	die if $? != 0;
	die "Updated only $1 keys; expected $parcelcfg{'NUMCHUNKS'}"
		if $1 != $parcelcfg{"NUMCHUNKS"};

	# Vacuum can't occur within a transaction
	system("$bindir/query -t '$dst/$ver/keyring' VACUUM") == 0 or die;
	open(CHK, "-|", "$bindir/query", "$dst/$ver/keyring",
				"PRAGMA integrity_check") or die;
	<CHK> =~ /^ok\n$/ or die;
	close(CHK);
	die if $? != 0;
}

# When the OpenISR 0.8 client retrieves a chunk whose data is larger than
# 128 KB, it re-encodes it to be stored uncompressed.  When we convert
# parcels containing such chunks, both the old and new versions of the
# chunk convert to the same data.  As a result, we now have two parcel
# versions with the same keyring entries for a chunk, but where the older
# version's hdk directories contain a file for the chunk.  To prevent the
# locksrv's checkparcel module from complaining about these cases, we find
# them and remove the now-unnecessary chunk files.
sub prune_chunks {
	my $prev_ver = shift;
	my $ver = shift;
	my $chunk;
	my $dir;
	my $file;
	my $path;
	my $count = 0;
	use integer;

	print "Pruning unnecessary chunks for $prev_ver...";
	open(QRY, "-|", "$bindir/query", "$dst/$ver/keyring", "-a",
				"prev:$dst/$prev_ver/keyring",
				"SELECT main.keys.chunk FROM " .
				"main.keys JOIN prev.keys " .
				"ON main.keys.chunk == prev.keys.chunk " .
				"WHERE main.keys.tag == prev.keys.tag") or die;
	while ($chunk = <QRY>) {
		chomp $chunk;
		$dir = sprintf("%04d", $chunk / $parcelcfg{'CHUNKSPERDIR'});
		$file = sprintf("%04d", $chunk % $parcelcfg{'CHUNKSPERDIR'});
		$path = "$dst/$prev_ver/hdk/$dir/$file";
		if (-e $path) {
			unlink($path) or die "Couldn't unlink $path";
			$count++;
		}
	}
	close(QRY);
	die if $? != 0;
	print " $count pruned\n";
}

sub finish_version {
	my $ver = shift;
	my @files;
	my $pattern;
	my $file;
	my $stat;
	my $rh;
	my $fd;

	print "Packing version $ver...\n";
	opendir(CFG, "$dst/$ver/cfg") or die;
	@files = readdir(CFG);
	closedir(CFG);
	foreach $pattern ("\.{1,2}", "(.*\.)?nvram", ".*\.vmdk", ".*\.vmem",
				".*\.vmss", ".*\.vmx", ".*\.vmxf",
				"vmware[-0-9]*\.log") {
		eval "\@files = grep(!/^$pattern\$/, \@files)";
	}
	foreach $file (@files) {
		if ($file =~ /\.(WRITELOCK|lck|vmsd|vmsn)$|^vmware-core\.gz$/) {
			print "Removing $ver/cfg/$file\n";
			system("rm -rf $dst/$ver/cfg/$file") == 0 or die;
		} else {
			print "Unknown file in $ver/cfg: $file\n";
		}
	}
	($rh, $fd) = keyroot_pipe($new_keyroot);
	system("tar cC '$dst/$ver' cfg | gzip -c9 | openssl enc " .
				"-aes-128-cbc -out '$dst/$ver/cfg.tgz.enc' " .
				"-pass 'fd:$fd' -salt") == 0 or die;
	($rh, $fd) = keyroot_pipe($new_keyroot);
	system("openssl enc -aes-128-cbc -in '$dst/$ver/keyring' " .
			"-out '$dst/$ver/keyring.enc' " .
			"-pass 'fd:$fd' -salt") == 0 or die;
	unlink("$dst/$ver/keyring") or die;
	system("rm -rf '$dst/$ver/cfg'") == 0 or die;
	$stat = stat("$src/$ver/keyring.enc") or die;
	# isr_srv_ls.pl uses the keyring mtime as the checkin time, so we
	# need to carry this over
	utime(time, $stat->mtime, "$dst/$ver/keyring.enc") or die;
}

if ($#ARGV + 1 != 6) {
	print "Usage: $0 src-parcelcfg src-dir dst-parcelcfg dst-dir userid " .
				"parcel-name\n";
	exit 1;
}

opendir(SRC, $src) || die "Can't open directory $src";
@versions = sort grep {/[0-9]+/} readdir SRC or die;
closedir(SRC);

-f "$src/LOCK" && die "Source parcel is checked out";

umask 0077;
gen_keyroot;
process_parcel_cfg;
init_dest;
foreach my $ver (@versions) {
	prepare_version $ver;
	upgrade_keyring $ver;
	update_chunks $ver;
}
foreach my $ver (@versions) {
	rewrite_keyring $ver;
}
my $prev_ver;
foreach my $ver (@versions) {
	prune_chunks $prev_ver, $ver
		if defined $prev_ver;
	$prev_ver = $ver;
}
foreach my $ver (@versions) {
	finish_version $ver;
}
print "Finishing up...\n";
unlink("$dst/mapdb") == 1 or die;
system("chmod -R g+rX,o+rX $dst") == 0 or die;
print "Upgrade complete\n";
