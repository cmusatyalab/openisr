#!!!PERLPATH!!
#
# post - run post-installation actions
#
# Copyright (C) 2007-2009 Carnegie Mellon University
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2 of the GNU General Public License as published
# by the Free Software Foundation.  A copy of the GNU General Public License
# should have been distributed along with this program in the file
# LICENSE.GPL.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#

use strict;
use warnings;
use Term::ANSIColor;
use constant {
	SBINDIR => "!!SBINDIR!!",
	ISRGROUP => "!!ISRGROUP!!",
};

sub fail ($) {
	my $msg = shift;

	print colored("Failed: $msg", "red") . "\n";
	exit 1;
}

sub warning ($) {
	my $msg = shift;

	print colored("Warning: $msg", "yellow") . "\n";
}

sub status ($) {
	my $msg = shift;

	print colored($msg, "green") . "\n";
}

fail "You must be root."
	if $> != 0;

# Create the ISRGROUP group if it doesn't already exist
unless (defined getgrnam(ISRGROUP)) {
	status "Creating " . ISRGROUP . " group...";
	system("groupadd " . ISRGROUP) == 0
		or fail "Couldn't create " . ISRGROUP . " group";
}

# Now that we have the system group, reread udev rules file
status "Reloading udev rules...";
if (-x "/sbin/udevadm") {
	my $help = `/sbin/udevadm control --help`;
	my $ret;
	if ($help =~ /reload-rules/) {
		$ret = system("/sbin/udevadm control --reload-rules");
	} else {
		$ret = system("/sbin/udevadm control --reload_rules");
	}
	fail "Couldn't run udevadm"
		if $ret;
} else {
	system("/sbin/udevcontrol reload_rules") == 0
		or fail "Couldn't run udevcontrol";
}

# If the loop driver is built into the kernel, running openisr-config won't
# change the permissions of the loop device nodes.  Thus we set the right
# permissions by hand.
status "Setting permissions on loop device nodes...";
my $gid = (getgrnam(ISRGROUP))[2]
	or fail "Couldn't get GID of " . ISRGROUP;
opendir(DEV, "/dev")
	or fail "Couldn't list /dev";
for my $node (grep(/^loop[0-9]+$/, readdir(DEV))) {
	chown(-1, $gid, "/dev/$node") == 1
		or fail "Couldn't chgrp /dev/$node";
	chmod(0660, "/dev/$node") == 1
		or fail "Couldn't chmod /dev/$node";
}
closedir(DEV);

# Print final thoughts
status "Setup succeeded.";
my $grp = ISRGROUP;
print <<EOF;
Any user who will use OpenISR must be added to the "$grp" group.

EOF

exit 0;
